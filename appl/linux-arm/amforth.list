ARM GAS  amforth.asm 			page 1


   1              	
   2              	.syntax unified
   3              	
   4              	.equ datastack_size, 1024   
   5              	.equ returnstack_size, 1024
   6              	.equ refill_buf_size, 96
   7              	.equ appl_userarea_size, 8 
   8              	.equ leavestack_size, 128
   9              	
  10              	
  11              	.section amforth, "awx" @ Everything is writeable and executable
  12              	.align 4
  13              	.text
  14              	.global _start
  15              	_start:
  16 0000 28009FE5 	  ldr r0, =PFA_ARGV  @ Save the initial stack pointer, as it contains
  17 0004 00D080E5 	  str sp, [r0]       @ command line arguments. Do this only once on first entry.
  18              	
  19 0008 24009FE5 	  ldr r0, =PFA_COLD+1
  20 000c 10FF2FE1 	  bx r0 @ Switch to thumb mode
  21              	
  22              	.thumb
  23              	
  24              	.include "macros.s"
   1              	
   2              	@ register usage
   3              	@ temporary r0, r1, r2, r3, r4, r5
   4              	
   5              	tos     .req r6
   6              	psp     .req r7
   7              	FORTHW  .req r8
   8              	FORTHIP .req r9
   9              	UP      .req r10
  10              	rloopindex .req r11
  11              	rlooplimit .req r12
  12              	
  13              	@ default register mapping
  14              	@ sp .req r13
  15              	@ lr .req r14
  16              	@ pc .req r15
  17              	
  18              	.macro NEXT
  19              	    b DO_NEXT
  20              	    .ltorg
  21              	.endm
  22              	
  23              	.macro savetos @ Push TOS on Datastack - a common, often used factor.
  24              	    str tos, [psp, #-4]!
  25              	.endm
  26              	
  27              	.macro loadtos
  28              	    ldr tos, [psp], #4
  29              	.endm
  30              	
  31              	.macro pushda register @ Push register on Datastack
  32              	  savetos
  33              	  mov tos, \register
ARM GAS  amforth.asm 			page 2


  34              	.endm
  35              	
  36              	.macro popda register @ Pop register from Datastack
  37              	  mov \register, tos
  38              	  loadtos
  39              	.endm
  40              	
  41              	.macro STARTDICT
  42              	.equ FLASH_START, .
  43              	.word 0
  44              	97: @ arm-wordlist
  45              	98: @ environment wordlist
  46              	99: @ forth-wordlist
  47              	.endm
  48              	
  49              	@ save the beginning of the wordlists
  50              	.macro ENDDICT
  51              	VALUE "arm-wordlist" ARM_WORDLIST, 97b
  52              	VALUE "environment", ENVIRONMENT, 98b
  53              	VALUE "forth-wordlist", FORTH_WORDLIST, 99b
  54              	.equ FLASH_END, .
  55              	.set DPSTART, 99b
  56              	.equ HERESTART, rampointer
  57              	.endm
  58              	
  59              	.macro STRING string
  60              	    .word XT_DOSLITERAL
  61              	    .byte 8f - 7f
  62              	7:  .ascii "\string"
  63              	8:  .p2align 2
  64              	.endm
  65              	
  66              	.macro ramallot Name, Length 
  67              	  .equ RAM_lower_\Name, rampointer     @ \Name at
  68              	  .set rampointer, rampointer + \Length
  69              	  .equ RAM_upper_\Name, rampointer     @ \Name at
  70              	.endm
  71              	
  72              	.equ Flag_invisible,  0xFFFFFFFF
  73              	.equ Flag_visible,    0x00000000
  74              	
  75              	.equ Flag_immediate,  0x0010
  76              	.equ Flag_value,      0x0020
  77              	.equ Flag_defer,      0x0040
  78              	.equ Flag_init,       0x0080
  79              	
  80              	.equ Flag_ramallot,   Flag_visible | 0x0100      
  81              	.equ Flag_variable,   Flag_ramallot| 1           
  82              	.equ Flag_2variable,  Flag_ramallot| 2
  83              	
  84              	.macro HEADER Flags, Name, Label, PFA
  85              	    .p2align 2
  86              	VE_\Label:
  87              	    .word 99b         @ Insert Link
  88              	99: .word \Flags      @ Flag field
  89              	    .byte 8f - 7f     @ Calculate length of name field
  90              	7:  .ascii "\Name"    @ Insert name string
ARM GAS  amforth.asm 			page 3


  91              	8:  .p2align 2        @ Realign
  92              	   XT_\Label: .word \PFA
  93              	   PFA_\Label: 
  94              	.endm
  95              	
  96              	.macro CODEWORD Name, Label
  97              	    HEADER Flag_visible, "\Name", \Label, PFA_\Label
  98              	.endm
  99              	
 100              	.macro HEADLESS Label
 101              	   XT_\Label: .word PFA_\Label
 102              	   PFA_\Label: 
 103              	.endm
 104              	
 105              	.macro COLON Name, Label
 106              	    HEADER Flag_visible, "\Name", \Label, DOCOLON
 107              	.endm
 108              	
 109              	.macro IMMED Name, Label
 110              	    Header Flag_visible|Flag_immediate, \Name, \Label, DOCOLON
 111              	.endm
 112              	
 113              	.macro NONAME Label
 114              	   XT_\Label: .word DOCOLON
 115              	   PFA_\Label: 
 116              	.endm
 117              	
 118              	
 119              	.macro VARIABLE Name, Label
 120              	   HEADER Flag_visible|Flag_variable, "\Name", \Label, PFA_DOVARIABLE
 121              	   .word rampointer
 122              	   .set rampointer, rampointer+cellsize
 123              	.endm
 124              	
 125              	.macro DVARIABLE Name, Label
 126              	   HEADER Flag_visible|Flag_variable, "\Name", \Label, PFA_DOVARIABLE
 127              	   .word rampointer
 128              	   .set rampointer, rampointer+2*cellsize
 129              	.endm
 130              	
 131              	.macro USER Name, Label, UOffset
 132              	   HEADER Flag_visible|Flag_variable, "\Name", \Label, PFA_DOUSER
 133              	    .word \UOffset
 134              	    .equ USER_\Label,\UOffset @ for listing
 135              	.endm
 136              	
 137              	.macro VALUE Name, Label, Default
 138              	    HEADER Flag_visible|Flag_value|Flag_init, "\Name", \Label, PFA_DOVALUE
 139              	   .word rampointer
 140              	    .equ RAM_\Label,rampointer @ for listing
 141              	   .set rampointer, rampointer+cellsize
 142              	   .word \Default
 143              	   .word XT_FETCH
 144              	   .word XT_STORE
 145              	.endm
 146              	
 147              	.macro DEFER Name, Label, XT
ARM GAS  amforth.asm 			page 4


 148              	    HEADER Flag_visible|Flag_defer|Flag_init, "\Name", \Label, PFA_DODEFER
 149              	   .word rampointer
 150              	    .equ DEFER_RAM_\Label,rampointer @ for listing
 151              	   .set rampointer, rampointer+cellsize
 152              	   .word \XT
 153              	   .word XT_FETCH
 154              	   .word XT_STORE
 155              	.endm
 156              	
 157              	.macro UDEFER Name, Label, XT
 158              	    HEADER Flag_visible|Flag_defer|Flag_init, "\Name", \Label, PFA_DODEFER
 159              	   .word USER_\Label @ see user.inc for corresponding labels
 160              	   .word \XT
 161              	   .word XT_UDEFER_FETCH
 162              	   .word XT_UDEFER_STORE
 163              	.endm
 164              	
 165              	.macro CONSTANT Name, Label, NUM
 166              	    HEADER Flag_visible, "\Name", \Label, PFA_DOVARIABLE
 167              	    .word \NUM
 168              	.endm
 169              	
 170              	.macro DATA Name, Label
 171              	    HEADER Flag_visible, "\Name", \Label, PFA_DODATA
 172              	.endm
 173              	
 174              	
 175              	@ =============================
 176              	@ Environment entry. All of them are
 177              	@ treated as COLON words
 178              	@ =============================
 179              	.macro ENVIRONMENT Name, Label
 180              	    .p2align 2
 181              	VE_ENV_\Label:
 182              	    .word 98b          @ Insert Link
 183              	98:
 184              	    .word Flag_visible      @ Flag field
 185              	
 186              	    .byte 8f - 7f     @ Calculate length of name field
 187              	7:  .ascii "\Name"    @ Insert name string
 188              	8:  .p2align 2        @ Realign
 189              	
 190              	   XT_ENV_\Label: .word DOCOLON
 191              	   PFA_ENV_\Label:
 192              	.endm
 193              	
 194              	@ ================================
 195              	@ ARM Wordlist Entry
 196              	@ different types
 197              	@ ================================
 198              	
 199              	.macro ARM_HEADER Flags, Name, Label, PFA
 200              	    .p2align 2
 201              	VE_\Label:
 202              	    .word 97b         @ Insert Link
 203              	97:
 204              	    .word \Flags      @ Flag field
ARM GAS  amforth.asm 			page 5


 205              	
 206              	    .byte 8f - 7f     @ Calculate length of name field
 207              	7:  .ascii "\Name"    @ Insert name string
 208              	8:  .p2align 2        @ Realign
 209              	   XT_\Label: .word \PFA
 210              	   PFA_\Label: 
 211              	.endm
 212              	
 213              	.macro ARM_COLON Name, Label
 214              	    ARM_HEADER Flag_visible, "\Name", \Label, DOCOLON
 215              	.endm
 216              	
 217              	.macro ARM_CONSTANT Name, Label, NUM
 218              	    ARM_HEADER Flag_visible, "\Name", \Label, PFA_DOVARIABLE
 219              	    .word \NUM
 220              	.endm
 221              	
 222              	
 223              	@ ==================================
 224              	@ Debug Macro. Not used in production
 225              	@ ==================================
 226              	.macro SEMIT register
 227              	.ifdef DEBUG
 228              	   push {r0}
 229              	0: 
 230              	   ldr r0, =UARTFR
 231              	   ldr r0, [r0]
 232              	   ands r0, #TXFF
 233              	   bne 0b
 234              	
 235              	   ldr r0, =UARTDR
 236              	   str \register, [r0]
 237              	   pop {r0}
 238              	.endif
 239              	.endm
  25              	.include "preamble.inc"
   1              	
   2              	# initial setup of assembly variables and settings
   3              	
   4              	# used by ramallot
   5              	.set rampointer, RamStart  
   6              	
   7              	.equ cellsize, 4
   8              	
   9              	.set sys_userarea_size, 32*cellsize
  10              	
  11              	.set userarea_size, sys_userarea_size+appl_userarea_size
  12              	
  13              	ramallot datastack, datastack_size
  14              	ramallot returnstack, returnstack_size
  15              	ramallot userarea, userarea_size
  16              	ramallot refill_buf, refill_buf_size
  17              	ramallot leavestack, leavestack_size
  26              	.include "user.inc"
   1              	
   2              	.equ USER_STATE, 0
   3              	.equ USER_FOLLOWER, 1*cellsize
ARM GAS  amforth.asm 			page 6


   4              	
   5              	.equ USER_RP, 2*cellsize
   6              	.equ USER_SP0, 3*cellsize
   7              	.equ USER_SP, 4*cellsize
   8              	.equ USER_HANDLER, 5*cellsize
   9              	.equ USER_BASE, 6*cellsize
  10              	
  11              	.equ USER_UDT, 7*cellsize
  27              	
  28 0010 00000000 	STARTDICT
  29              	
  30              	.include "dict_prims.inc"
   1              	#
   2              	# all primitves / code words
   3              	# they are placed close together to
   4              	# maximize cache usage
   5              	#
   6              	
   7              	.include "words/exit.s"
   1              	
   2 0014 14000000 	CODEWORD "exit", EXIT
   2      00000000 
   2      04657869 
   2      7400C046 
   2      28000000 
   3 0028 5DF8049B 	    pop {FORTHIP}
   4 002c 00F00BBC 	NEXT
   4      78350000 
   4      110C0000 
   8              	.include "words/drop.s"
   1              	@ -----------------------------------------------------------------------------
   2 0038 18000000 	  CODEWORD "drop",DROP @ ( x -- )
   2      00000000 
   2      0464726F 
   2      7000C046 
   2      4C000000 
   3              	@ -----------------------------------------------------------------------------
   4 004c 40CF     	  ldm psp!, {tos}
   5 004e FAE3     	NEXT
   9              	.include "words/swap.s"
   1              	@ -----------------------------------------------------------------------------
   2 0050 3C000000 	  CODEWORD "swap", SWAP @ ( x y -- y x )
   2      00000000 
   2      04737761 
   2      7000C046 
   2      64000000 
   3              	@ -----------------------------------------------------------------------------
   4 0064 3968     	  ldr r1,  [psp]  @ Load X from the stack, no SP change.
   5 0066 3E60     	  str tos, [psp]  @ Replace it with TOS.
   6 0068 0E00     	  movs tos, r1    @ And vice versa.
   7 006a ECE3     	NEXT
  10              	.include "words/dup.s"
   1              	@ -----------------------------------------------------------------------------
   2 006c 54000000 	  CODEWORD "dup", DUP @ ( x -- x x )
   2      00000000 
   2      03647570 
   2      7C000000 
ARM GAS  amforth.asm 			page 7


   3              	@ -----------------------------------------------------------------------------
   4 007c 47F8046D 	  savetos
   5 0080 E1E3     	NEXT
  11              	.include "words/nip.s"
   1              	@ -----------------------------------------------------------------------------
   2 0082 C0467000 	  CODEWORD "nip", NIP @ ( x y -- x )
   2      00000000 
   2      0000036E 
   2      69709400 
   2      0000
   3              	@ -----------------------------------------------------------------------------
   4 0094 0437     	  adds psp, #4 @ Move SP to eliminate next element.
   5 0096 D6E3     	NEXT
  12              	.include "words/over.s"
   1              	@ -----------------------------------------------------------------------------
   2 0098 88000000 	  CODEWORD "over", OVER @ ( x y -- x y x )
   2      00000000 
   2      046F7665 
   2      7200C046 
   2      AC000000 
   3              	@ -----------------------------------------------------------------------------
   4 00ac 47F8046D 	  savetos
   5 00b0 7E68     	  ldr tos, [psp, #4] 
   6 00b2 C8E3     	NEXT
  13              	.include "words/rot.s"
   1              	
   2              	@ -----------------------------------------------------------------------------
   3 00b4 9C000000 	  CODEWORD "rot", ROT @ ( x w y -- w y x )
   3      00000000 
   3      03726F74 
   3      C4000000 
   4              	@ -----------------------------------------------------------------------------
   5 00c4 03CF     	  ldm psp!, {r0, r1}
   6 00c6 083F     	  subs psp, #8
   7 00c8 7860     	  str r0, [psp, #4]
   8 00ca 3E60     	  str tos, [psp]
   9 00cc 0E00     	  movs tos, r1
  10 00ce BAE3     	NEXT
  14              	.include "words/q-dup.s"
   1              	@ -----------------------------------------------------------------------------
   2 00d0 B8000000 	  CODEWORD "?dup", QDUP @ ( x -- 0 | x x )
   2      00000000 
   2      043F6475 
   2      7000C046 
   2      E4000000 
   3              	@ -----------------------------------------------------------------------------
   4 00e4 002E     	  cmp tos, #0
   5 00e6 01D0     	  beq 1f
   6 00e8 47F8046D 	  savetos
   7 00ec ABE3     	1:NEXT
  15              	.include "words/tuck.s"
   1              	@ -----------------------------------------------------------------------------
   2 00ee C046D400 	  CODEWORD "tuck", TUCK @ ( x1 x2 -- x2 x1 x2 )
   2      00000000 
   2      00000474 
   2      75636B00 
   2      C0460401 
ARM GAS  amforth.asm 			page 8


   3              	@ -----------------------------------------------------------------------------
   4              	tuck:
   5 0104 01CF     	  ldm psp!, {r0}
   6 0106 083F     	  subs psp, #8
   7 0108 7E60     	  str tos, [psp, #4]
   8 010a 3860     	  str r0, [psp]
   9 010c 9BE3     	NEXT
  16              	.include "words/pick.s"
   1              	@ -----------------------------------------------------------------------------
   2 010e C046F400 	  CODEWORD "pick", PICK @ ( xu .. x1 x0 u -- xu ... x1 x0 xu ) 
   2      00000000 
   2      00000470 
   2      69636B00 
   2      C0462401 
   3              	@ -----------------------------------------------------------------------------
   4 0124 57F82660 	  ldr tos, [psp, tos, lsl #2]  
   5 0128 8DE3     	NEXT
  17              	
  18              	.include "words/to-r.s"
   1              	@------------------------------------------------------------------------------
   2 012a C0461401 	  CODEWORD ">r", TO_R @ 
   2      00000000 
   2      0000023E 
   2      72003C01 
   2      0000
   3              	@------------------------------------------------------------------------------
   4 013c 40B4     	  push {tos}
   5 013e 40CF     	  ldm psp!, {tos}
   6 0140 81E3     	NEXT
  19              	.include "words/r-from.s"
   1              	@------------------------------------------------------------------------------
   2 0142 C0463001 	  CODEWORD "r>", R_FROM @ 
   2      00000000 
   2      00000272 
   2      3E005401 
   2      0000
   3              	@------------------------------------------------------------------------------
   4 0154 47F8046D 	  savetos
   5 0158 40BC     	  pop {tos}
   6 015a 74E3     	NEXT
  20              	.include "words/r-fetch.s"
   1              	@------------------------------------------------------------------------------
   2 015c 48010000 	  CODEWORD "r@",R_FETCH @ 
   2      00000000 
   2      02724000 
   2      6C010000 
   3              	@------------------------------------------------------------------------------
   4 016c 47F8046D 	  savetos
   5 0170 009E     	  ldr tos, [sp]
   6 0172 68E3     	NEXT
  21              	.include "words/rp.s"
   1              	@ -----------------------------------------------------------------------------
   2 0174 60010000 	  CODEWORD "rp@", RP_FETCH @ ( -- a-addr )
   2      00000000 
   2      03727040 
   2      84010000 
   3              	@ -----------------------------------------------------------------------------
ARM GAS  amforth.asm 			page 9


   4 0184 47F8046D 	  savetos
   5 0188 6E46     	  mov tos, sp
   6 018a 5CE3     	NEXT
   7              	@ -----------------------------------------------------------------------------
   8 018c 78010000 	  CODEWORD "rp!", RP_STORE @ ( a-addr -- )
   8      00000000 
   8      03727021 
   8      9C010000 
   9              	@ -----------------------------------------------------------------------------
  10 019c B546     	  mov sp, tos
  11 019e 40CF     	  ldm psp!, {tos}
  12 01a0 51E3     	NEXT
  13              	
  14 01a2 C0469001 	USER "rp", RP, USER_RP
  14      00000101 
  14      00000272 
  14      7000120F 
  14      00000800 
  22              	.include "words/sp.s"
   1              	@ -----------------------------------------------------------------------------
   2 01b8 A8010000 	  CODEWORD "sp@", SP_FETCH @ ( -- a-addr )
   2      00000000 
   2      03737040 
   2      C8010000 
   3              	@ -----------------------------------------------------------------------------
   4 01c8 47F8046D 	  savetos
   5 01cc 3E46     	  mov tos, psp
   6 01ce 3AE3     	NEXT
   7              	@ -----------------------------------------------------------------------------
   8 01d0 BC010000 	  CODEWORD "sp!", SP_STORE @ ( a-addr -- )
   8      00000000 
   8      03737021 
   8      E0010000 
   9              	@ -----------------------------------------------------------------------------
  10 01e0 3746     	  mov psp, tos
  11 01e2 40CF     	  ldm psp!, {tos}
  12 01e4 2FE3     	NEXT
  13              	
  14 01e6 C046D401 	USER "sp", SP, USER_SP
  14      00000101 
  14      00000273 
  14      7000120F 
  14      00001000 
  15 01fc EC010000 	USER "sp0", SP0, USER_SP0
  15      01010000 
  15      03737030 
  15      120F0000 
  15      0C000000 
  23              	
  24              	.include "words/fetch.s"
   1              	@ -----------------------------------------------------------------------------
   2 0210 00020000 	  CODEWORD "@", FETCH @ ( 32-addr -- x )
   2      00000000 
   2      0140C046 
   2      20020000 
   3              	@ -----------------------------------------------------------------------------
   4 0220 3668     	  ldr tos, [tos]
ARM GAS  amforth.asm 			page 10


   5 0222 10E3     	NEXT
  25              	.include "words/store.s"
   1              	@ -----------------------------------------------------------------------------
   2 0224 14020000 	  CODEWORD "!", STORE @ ( x 32-addr -- )
   2      00000000 
   2      0121C046 
   2      34020000 
   3 0234 03CF     	  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
   4 0236 3060     	  str r0, [tos]      @ Popping both saves a cycle.
   5 0238 0E00     	  movs tos, r1
   6 023a 04E3     	NEXT
  26              	
  27              	.include "words/negate.s"
   1              	@ -----------------------------------------------------------------------------
   2 023c 28020000 	  CODEWORD "negate", NEGATE @ ( n1 -- -n1 )
   2      00000000 
   2      066E6567 
   2      61746500 
   2      50020000 
   3              	@ -----------------------------------------------------------------------------
   4 0250 7642     	  rsbs tos, tos, #0
   5 0252 F8E2     	NEXT
  28              	.include "words/abs.s"
   1 0254 40020000 	CODEWORD "abs", ABS @ ( n1 -- |n1| )
   1      00000000 
   1      03616273 
   1      64020000 
   2 0264 002E     	  cmp tos, #0
   3 0266 B8BF     	  it lt
   4 0268 7642     	  neglt tos, tos
   5 026a ECE2     	NEXT
  29              	.include "words/multiplydivide.s"
   1              	@ -----------------------------------------------------------------------------
   2 026c 58020000 	  COLON "mod", MOD @ ( n1 n2 -- rem )
   2      00000000 
   2      036D6F64 
   2      40080000 
   3              	@ -----------------------------------------------------------------------------
   4 027c CC020000 	  .word XT_SLASHMOD, XT_NIP
   4      90000000 
   5 0284 24000000 	  .word XT_EXIT
   6              	
   7              	@ -----------------------------------------------------------------------------
   8 0288 70020000 	  COLON "/", SLASH @ ( n1 n2 -- n1/n2 )
   8      00000000 
   8      012FC046 
   8      40080000 
   9              	@ -----------------------------------------------------------------------------
  10 0298 CC020000 	  .word XT_SLASHMOD, XT_DROP
  10      48000000 
  11 02a0 24000000 	  .word XT_EXIT
  12              	
  13              	@ -----------------------------------------------------------------------------
  14 02a4 8C020000 	  CODEWORD "*",STAR @ ( u1|n1 u2|n2 -- u3|n3 )
  14      00000000 
  14      012AC046 
  14      B4020000 
ARM GAS  amforth.asm 			page 11


  15              	@ -----------------------------------------------------------------------------
  16 02b4 01CF     	  ldm psp!, {r0}    @ Get u1|n1 into a register.
  17 02b6 4643     	  muls tos, r0      @ Multiply!
  18 02b8 C5E2     	NEXT
  19              	
  20              	@ -----------------------------------------------------------------------------
  21 02ba C046A802 	  CODEWORD "/mod",SLASHMOD @ ( n1 n2 -- rem quot )
  21      00000000 
  21      0000042F 
  21      6D6F6400 
  21      C046D002 
  22              	@ -----------------------------------------------------------------------------
  23 02d0 01CF     	  ldm psp!, {r0}     @ Get u1 into a register
  24 02d2 3100     	  movs r1, tos       @ Back up the divisor in X.
  25 02d4 90FBF6F6 	  sdiv tos, r0, tos  @ Divide: quotient in TOS.
  26 02d8 7143     	  muls r1, tos, r1   @ Un-divide to compute remainder.
  27 02da 401A     	  subs r0, r1        @ Compute remainder.
  28 02dc 043F     	  subs psp, #4
  29 02de 3860     	  str r0, [psp]
  30 02e0 B1E2     	  NEXT
  31              	@ -----------------------------------------------------------------------------
  32 02e2 C046C002 	  CODEWORD "u/mod", USLASHMOD @ ( u1 u2 -- rem quot )
  32      00000000 
  32      00000575 
  32      2F6D6F64 
  32      C046F802 
  33 02f8 01CF     	  ldm psp!, {r0}      @ Get u1 into a register
  34 02fa 3100     	  movs r1, tos        @ Back up the divisor in X.
  35 02fc B0FBF6F6 	  udiv tos, r0, tos   @ Divide: quotient in TOS.
  36 0300 7143     	  muls r1, tos, r1    @ Un-divide to compute remainder.
  37 0302 401A     	  subs r0, r1         @ Compute remainder.
  38 0304 043F     	  subs psp, #4
  39 0306 3860     	  str r0, [psp]
  40 0308 9DE2     	  NEXT
  30              	.include "words/stack.s"
   1              	
   2 030a C046E802 	CODEWORD  "depth", DEPTH 
   2      00000000 
   2      00000564 
   2      65707468 
   2      C0462003 
   3 0320 0349     	  ldr r1, =RAM_upper_datastack 
   4 0322 A1EB0701 	  sub r1, psp 
   5 0326 47F8046D 	  savetos
   6 032a 8E10     	  asrs tos, r1, #2 
   7 032c 8BE20000 	NEXT
   7      00040000 
   8              	
   9 0334 10030000 	CODEWORD  "rdepth", RDEPTH
   9      00000000 
   9      06726465 
   9      70746800 
   9      48030000 
  10 0348 47F8046D 	  savetos
  11 034c 6E46     	  mov tos, sp
  12 034e 0249     	  ldr r1, =RAM_upper_returnstack
  13 0350 A1EB0601 	  sub r1, tos 
ARM GAS  amforth.asm 			page 12


  14 0354 8E10     	  asrs tos, r1, #2 
  15 0356 76E20008 	NEXT
  15      0000
  16              	
  17 035c 38030000 	CODEWORD  "rdrop", RDROP
  17      00000000 
  17      05726472 
  17      6F70C046 
  17      70030000 
  18 0370 01B0     	  add sp, #4
  19 0372 68E2     	NEXT
  31              	.include "words/logic.s"
   1              	@ -----------------------------------------------------------------------------
   2 0374 60030000 	  CODEWORD  "and",AND @ ( x1 x2 -- x1&x2 )
   2      00000000 
   2      03616E64 
   2      84030000 
   3              	                        @ Combines the top two stack elements using bitwise AND.
   4              	@ -----------------------------------------------------------------------------
   5 0384 01CF     	  ldm psp!, {r0}
   6 0386 0640     	  ands tos, r0
   7 0388 5DE2     	NEXT
   8              	
   9              	@ -----------------------------------------------------------------------------
  10 038a C0467803 	  CODEWORD  "or",OR @ ( x1 x2 -- x1|x2 )
  10      00000000 
  10      0000026F 
  10      72009C03 
  10      0000
  11              	                       @ Combines the top two stack elements using bitwise OR.
  12              	@ -----------------------------------------------------------------------------
  13 039c 01CF     	  ldm psp!, {r0}
  14 039e 0643     	  orrs tos, r0
  15 03a0 51E2     	NEXT
  16              	
  17              	@ -----------------------------------------------------------------------------
  18 03a2 C0469003 	  CODEWORD  "xor",XOR @ ( x1 x2 -- x1|x2 )
  18      00000000 
  18      00000378 
  18      6F72B403 
  18      0000
  19              	                        @ Combines the top two stack elements using bitwise exclusive-OR.
  20              	@ -----------------------------------------------------------------------------
  21 03b4 01CF     	  ldm psp!, {r0}
  22 03b6 4640     	  eors tos, r0
  23 03b8 45E2     	  NEXT
  24              	
  25              	@ -----------------------------------------------------------------------------
  26 03ba C046A803 	  CODEWORD  "not",NOT @ ( x -- ~x )
  26      00000000 
  26      0000036E 
  26      6F74CC03 
  26      0000
  27              	@ -----------------------------------------------------------------------------
  28 03cc F643     	  mvns tos, tos
  29 03ce 3AE2     	NEXT
  30              	
ARM GAS  amforth.asm 			page 13


  31 03d0 C0030000 	CODEWORD  "invert", INVERT
  31      00000000 
  31      06696E76 
  31      65727400 
  31      E4030000 
  32 03e4 F643     	  mvns tos,tos
  33 03e6 2EE2     	NEXT
  34              	
  35              	@ -----------------------------------------------------------------------------
  36 03e8 D4030000 	  CODEWORD  "rshift",RSHIFT @ ( x n -- x )
  36      00000000 
  36      06727368 
  36      69667400 
  36      FC030000 
  37              	@ -----------------------------------------------------------------------------
  38 03fc 01CF     	  ldm psp!, {r0}
  39 03fe F040     	  lsrs r0, tos
  40 0400 0600     	  movs tos, r0
  41 0402 20E2     	NEXT
  42              	
  43              	@ -----------------------------------------------------------------------------
  44 0404 EC030000 	  CODEWORD  "lshift",LSHIFT @ ( x n -- x )
  44      00000000 
  44      066C7368 
  44      69667400 
  44      18040000 
  45              	@ -----------------------------------------------------------------------------
  46 0418 01CF     	  ldm psp!, {r0}
  47 041a B040     	  lsls r0, tos
  48 041c 0600     	  movs tos, r0
  49 041e 12E2     	NEXT
  32              	.include "words/memory.s"
   1              	@------------------------------------------------------------------------------
   2 0420 08040000 	  CODEWORD  "move",MOVE  @ Move some bytes around. This can cope with overlapping memory areas.
   2      00000000 
   2      046D6F76 
   2      6500C046 
   2      34040000 
   3              	@------------------------------------------------------------------------------
   4              	
   5 0434 07B4     	  push {r0, r1, r2}
   6              	
   7 0436 314657F8 	  popda r1 @ Count
   7      046B
   8 043c 324657F8 	  popda r2 @ Destination address
   8      046B
   9              	  @ TOS:     Source address
  10              	
  11              	  @ Count > 0 ?
  12 0442 0029     	  cmp r1, #0
  13 0444 0FD0     	  beq 3f @ Nothing to do if count is zero.
  14              	
  15              	  @ Compare source and destination address to find out which direction to copy.
  16 0446 B242     	  cmp r2, tos
  17 0448 0DD0     	  beq 3f @ If source and destionation are the same, nothing to do.
  18 044a 06D3     	  blo 2f
  19              	
ARM GAS  amforth.asm 			page 14


  20 044c 013E     	  subs tos, #1
  21 044e 013A     	  subs r2, #1
  22              	
  23              	1:@ Source > Destination --> Backward move
  24 0450 705C     	  ldrb r0, [tos, r1]
  25 0452 5054     	  strb r0, [r2, r1]
  26 0454 0139     	  subs r1, #1
  27 0456 FBD1     	  bne 1b
  28 0458 05E0     	  b 3f
  29              	
  30              	2:@ Source < Destination --> Forward move
  31 045a 3078     	  ldrb r0, [tos]
  32 045c 1070     	  strb r0, [r2]
  33 045e 0136     	  adds tos, #1
  34 0460 0132     	  adds r2, #1
  35 0462 0139     	  subs r1, #1
  36 0464 F9D1     	  bne 2b
  37              	
  38 0466 40CF     	3:  ldm psp!, {tos}
  39 0468 07BC     	  pop {r0, r1, r2}
  40 046a ECE1     	  NEXT
  41              	
  42              	@------------------------------------------------------------------------------
  43 046c 24040000 	  CODEWORD  "fill",FILL  @ Fill memory with given byte.
  43      00000000 
  43      0466696C 
  43      6C00C046 
  43      80040000 
  44              	  @ ( Destination Count Filling -- )
  45              	@------------------------------------------------------------------------------
  46 0480 304657F8 	  popda r0 @ Filling byte
  46      046B
  47 0486 314657F8 	  popda r1 @ Count
  47      046B
  48              	  @ TOS      Destination
  49              	
  50 048c 0029     	  cmp r1, #0
  51 048e 02D0     	  beq 2f
  52              	
  53 0490 0139     	1:subs r1, #1
  54 0492 7054     	  strb r0, [tos, r1]
  55 0494 FCD1     	  bne 1b
  56              	
  57 0496 40CF     	2:  ldm psp!, {tos}
  58              	
  59 0498 D5E1     	NEXT
  60              	
  61              	@ -----------------------------------------------------------------------------
  62 049a C0467004 	  CODEWORD  "+!", PLUSSTORE @ ( x 32-addr -- )
  62      00000000 
  62      0000022B 
  62      2100AC04 
  62      0000
  63              	                               @ Adds 'x' to the memory cell at 'addr'.
  64              	@ -----------------------------------------------------------------------------
  65 04ac 03CF     	  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
  66 04ae 3268     	  ldr  r2, [tos]     @ Load the current cell value
ARM GAS  amforth.asm 			page 15


  67 04b0 1218     	  adds r2, r0        @ Do the add
  68 04b2 3260     	  str  r2, [tos]     @ Store it back
  69 04b4 0E00     	  movs tos, r1
  70 04b6 C6E1     	NEXT
  71              	
  72              	@ -----------------------------------------------------------------------------
  73 04b8 A0040000 	  CODEWORD  "c@", CFETCH @ ( 8-addr -- x )
  73      00000000 
  73      02634000 
  73      C8040000 
  74              	                              @ Loads the byte at 'addr'.
  75              	@ -----------------------------------------------------------------------------
  76 04c8 3678     	  ldrb tos, [tos]
  77 04ca BCE1     	NEXT
  78              	
  79              	@ -----------------------------------------------------------------------------
  80 04cc BC040000 	  CODEWORD  "c!", CSTORE @ ( x 8-addr -- )
  80      00000000 
  80      02632100 
  80      DC040000 
  81              	@ Given a value 'x' and an 8-bit-aligned address 'addr', stores 'x' to memory at 'addr', consuming 
  82              	@ -----------------------------------------------------------------------------
  83 04dc 03CF     	  ldm psp!, {r0, r1} @ X is the new TOS after the store completes.
  84 04de 3070     	  strb r0, [tos]     @ Popping both saves a cycle.
  85 04e0 0E00     	  movs tos, r1
  86 04e2 B0E1     	NEXT
  33              	
  34              	.include "words/comparisions.s"
   1              	@
   2              	@    Mecrisp-Stellaris - A native code Forth implementation for ARM-Cortex M microcontrollers
   3              	@    Copyright (C) 2013  Matthias Koch
   4              	@
   5              	@    This program is free software: you can redistribute it and/or modify
   6              	@    it under the terms of the GNU General Public License as published by
   7              	@    the Free Software Foundation, either version 3 of the License, or
   8              	@    (at your option) any later version.
   9              	@
  10              	@    This program is distributed in the hope that it will be useful,
  11              	@    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12              	@    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13              	@    GNU General Public License for more details.
  14              	@
  15              	@    You should have received a copy of the GNU General Public License
  16              	@    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17              	@
  18              	
  19              	@ Vergleichsoperatoren
  20              	@ Comparision operators
  21              	
  22              	@ -----------------------------------------------------------------------------
  23 04e4 D0040000 	  CODEWORD  "0=", ZEROEQUAL @ ( x -- ? )
  23      00000000 
  23      02303D00 
  23      F4040000 
  24              	@ -----------------------------------------------------------------------------
  25 04f4 013E     	  subs tos, #1
  26 04f6 B641     	  sbcs tos, tos
ARM GAS  amforth.asm 			page 16


  27 04f8 A5E1     	NEXT
  28              	
  29              	@ -----------------------------------------------------------------------------
  30 04fa C046E804 	  CODEWORD  "0<>", NOTZEROEQUAL @ ( x -- ? ) @ Meins
  30      00000000 
  30      00000330 
  30      3C3E0C05 
  30      0000
  31              	@ -----------------------------------------------------------------------------
  32 050c 013E     	  subs tos, #1
  33 050e B641     	  sbcs tos, tos
  34 0510 F643     	  mvns tos, tos
  35 0512 98E1     	NEXT
  36              	
  37              	@ -----------------------------------------------------------------------------
  38 0514 00050000 	  CODEWORD  "0<", ZEROLESS @ ( n -- ? )
  38      00000000 
  38      02303C00 
  38      24050000 
  39              	@ -----------------------------------------------------------------------------
  40 0524 3600     	  movs tos, tos
  41 0526 4FEA2606 	  asr tos, #32    @ Turn MSB into 0xffffffff or 0x00000000
  42 052a 8CE1     	NEXT
  43              	
  44              	@ -----------------------------------------------------------------------------
  45 052c 18050000 	  CODEWORD  ">=", GREATEREQUAL @ ( x1 x2 -- ? ) @ Meins
  45      00000000 
  45      023E3D00 
  45      3C050000 
  46              	@ -----------------------------------------------------------------------------
  47 053c 01CF     	  ldm psp!, {r0}     @ Get x1 into a register.
  48 053e B042     	  cmp r0, tos        @ Is x2 less?
  49 0540 B4BF     	  ite lt             @ If so,
  50 0542 0026     	  movlt tos, #0      @  set all bits in TOS,
  51 0544 4FF0FF36 	  movge tos, #-1     @  otherwise clear them all.
  52 0548 7DE1     	NEXT
  53              	
  54              	@ -----------------------------------------------------------------------------
  55 054a C0463005 	  CODEWORD  "<=", LESSEQUAL @ ( x1 x2 -- ? ) @ Meins          
  55      00000000 
  55      0000023C 
  55      3D005C05 
  55      0000
  56              	@ -----------------------------------------------------------------------------
  57 055c 01CF     	  ldm psp!, {r0}     @ Get x1 into a register.
  58 055e B042     	  cmp r0, tos        @ Is x2 greater?
  59 0560 CCBF     	  ite gt             @ If so,
  60 0562 0026     	  movgt tos, #0      @  set all bits in TOS,
  61 0564 4FF0FF36 	  movle tos, #-1     @  otherwise clear them all.
  62 0568 6DE1     	NEXT
  63              	
  64              	@ -----------------------------------------------------------------------------
  65 056a C0465005 	  CODEWORD  "<", LESS @ ( x1 x2 -- ? )
  65      00000000 
  65      0000013C 
  65      C0467C05 
  65      0000
ARM GAS  amforth.asm 			page 17


  66              	                      @ Checks if x2 is less than x1.
  67              	@ -----------------------------------------------------------------------------
  68 057c 01CF     	  ldm psp!, {r0}     @ Get x1 into a register.
  69 057e B042     	  cmp r0, tos        @ Is x2 less?
  70 0580 B4BF     	  ite lt             @ If so,
  71 0582 4FF0FF36 	  movlt tos, #-1     @  set all bits in TOS,
  72 0586 0026     	  movge tos, #0      @  otherwise clear them all.
  73 0588 5DE1     	NEXT
  74              	
  75              	@ -----------------------------------------------------------------------------
  76 058a C0467005 	  CODEWORD  ">", GREATER @ ( x1 x2 -- ? )
  76      00000000 
  76      0000013E 
  76      C0469C05 
  76      0000
  77              	                      @ Checks if x2 is greater than x1.
  78              	@ -----------------------------------------------------------------------------
  79 059c 01CF     	  ldm psp!, {r0}     @ Get x1 into a register.
  80 059e B042     	  cmp r0, tos        @ Is x2 greater?
  81 05a0 CCBF     	  ite gt             @ If so,
  82 05a2 4FF0FF36 	  movgt tos, #-1     @  set all bits in TOS,
  83 05a6 0026     	  movle tos, #0      @  otherwise clear them all.
  84 05a8 4DE1     	NEXT
  85              	
  86              	@ -----------------------------------------------------------------------------
  87 05aa C0469005 	  CODEWORD  "u<", ULESS @ ( u1 u2 -- ? )
  87      00000000 
  87      00000275 
  87      3C00BC05 
  87      0000
  88              	@ -----------------------------------------------------------------------------
  89 05bc 01CF     	  ldm psp!, {r0}      @ Get u1 into a register.
  90 05be 861B     	  subs tos, r0, tos   @ subs tos, w, tos   @ TOS = a-b  -- carry set if a is less than b
  91 05c0 B641     	  sbcs tos, tos
  92 05c2 40E1     	NEXT
  93              	@ -----------------------------------------------------------------------------
  94 05c4 B0050000 	  CODEWORD  "u>", UGREATER @ ( u1 u2 -- ? ) @ Meins
  94      00000000 
  94      02753E00 
  94      D4050000 
  95              	@ -----------------------------------------------------------------------------
  96 05d4 01CF     	  ldm psp!, {r0}
  97 05d6 361A     	  subs tos, r0
  98 05d8 B641     	  sbcs tos, tos
  99 05da 34E1     	NEXT
 100              	@ -----------------------------------------------------------------------------
 101 05dc C8050000 	  CODEWORD  "<>", NOTEQUAL @ ( x1 x2 -- ? )
 101      00000000 
 101      023C3E00 
 101      EC050000 
 102              	                       @ Compares the top two stack elements for inequality.
 103              	@ -----------------------------------------------------------------------------
 104 05ec 01CF     	  ldm psp!, {r0}      @ Get the next elt into a register.
 105 05ee 361A     	  subs tos, r0        @ Z=equality; if equal, TOS=0
 106              	
 107 05f0 18BF     	  it ne             @ If not equal,
 108 05f2 4FF0FF36 	  movne tos, #-1    @  set all bits in TOS.
ARM GAS  amforth.asm 			page 18


 109 05f6 26E1     	NEXT
 110              	
 111              	@ -----------------------------------------------------------------------------
 112 05f8 E0050000 	  CODEWORD  "=", EQUAL @ ( x1 x2 -- ? )
 112      00000000 
 112      013DC046 
 112      08060000 
 113              	                      @ Compares the top two stack elements for equality.
 114              	@ -----------------------------------------------------------------------------
 115 0608 01CF     	  ldm psp!, {r0}     @ Get the next elt into a register.
 116 060a 361A     	  subs tos, r0       @ Z=equality; if equal, TOS=0
 117              	
 118 060c 013E     	  subs tos, #1       @ Wenn es Null war, gibt es jetzt einen Überlauf
 119 060e B641     	  sbcs tos, tos
 120 0610 19E1     	NEXT
 121              	@ -----------------------------------------------------------------------------
 122 0612 C046FC05 	  CODEWORD  "min", MIN @ ( x1 x2 -- x3 )
 122      00000000 
 122      0000036D 
 122      696E2406 
 122      0000
 123              	                        @ x3 is the lesser of x1 and x2.
 124              	@ -----------------------------------------------------------------------------
 125 0624 01CF     	  ldm psp!, {r0}       @ Get x1 into a register.
 126 0626 B042     	  cmp r0, tos          @ Compare them.
 127 0628 B8BF     	  it lt                @ If X is less,
 128 062a 0646     	  movlt tos, r0        @  replace TOS with it.
 129 062c 0BE1     	NEXT
 130              	
 131              	@ -----------------------------------------------------------------------------
 132 062e C0461806 	  CODEWORD  "max", MAX @ ( x1 x2 -- x3 )
 132      00000000 
 132      0000036D 
 132      61784006 
 132      0000
 133              	                        @ x3 is the greater of x1 and x2.
 134              	@ -----------------------------------------------------------------------------
 135 0640 01CF     	  ldm psp!, {r0}       @ Get x1 into a register.
 136 0642 B042     	  cmp r0, tos          @ Compare them.
 137 0644 C8BF     	  it gt                @ If X is greater,
 138 0646 0646     	  movgt tos, r0        @  replace TOS with it.
 139 0648 FDE0     	NEXT
 140              	
 141              	@ -----------------------------------------------------------------------------
 142 064a C0463406 	  CODEWORD  "umax", UMAX @ ( u1 u2 -- u1|u2 )
 142      00000000 
 142      00000475 
 142      6D617800 
 142      C0466006 
 143              	@ -----------------------------------------------------------------------------
 144 0660 01CF     	  ldm psp!, {r0}  @ Get u1 into a register.
 145 0662 B042     	  cmp r0, tos 
 146 0664 88BF     	  it hi           @ If W > TOS,
 147 0666 0646     	  movhi tos, r0   @  replace TOS with W.
 148 0668 EDE0     	NEXT
 149              	
 150              	@ -----------------------------------------------------------------------------
ARM GAS  amforth.asm 			page 19


 151 066a C0465006 	  CODEWORD  "umin",UMIN @ ( u1 u2 -- u1|u2 )
 151      00000000 
 151      00000475 
 151      6D696E00 
 151      C0468006 
 152              	@ -----------------------------------------------------------------------------
 153 0680 01CF     	  ldm psp!, {r0}  @ Get u1 into a register.
 154 0682 B042     	  cmp r0, tos
 155 0684 38BF     	  it lo           @ If W < TOS,
 156 0686 0646     	  movlo tos, r0   @  replace TOS with W.
 157 0688 DDE0     	NEXT
  35              	
  36              	
  37              	.include "words/2swap.s"
   1              	@ -----------------------------------------------------------------------------
   2 068a C0467006 	  CODEWORD "2swap", 2SWAP @ ( 4 3 2 1 -- 2 1 4 3 )
   2      00000000 
   2      00000532 
   2      73776170 
   2      C046A006 
   3              	@ -----------------------------------------------------------------------------
   4 06a0 00F001F8 	  bl dswap
   5 06a4 CFE0     	NEXT
   6              	
   7              	dswap:
   8 06a6 00B5     	  push {lr}
   9 06a8 07CF     	  ldm psp!, {r0, r1, r2}
  10 06aa 043F     	  subs psp, #4
  11 06ac 3860     	  str r0, [psp]
  12 06ae 47F8046D 	  savetos
  13 06b2 043F     	  subs psp, #4
  14 06b4 3A60     	  str r2, [psp]
  15 06b6 0E00     	  movs tos, r1
  16 06b8 00BD     	  pop {pc}
  38              	.include "words/2nip.s"
   1 06ba C0469006 	  CODEWORD "2nip", 2NIP @ ( 4 3 2 1 -- 2 1 )
   1      00000000 
   1      00000432 
   1      6E697000 
   1      C046D006 
   2 06d0 07CF     	  ldm psp!, {r0, r1, r2}
   3 06d2 A7F10407 	  sub psp, #4
   4 06d6 3860     	  str r0, [psp]
   5 06d8 B5E0     	NEXT
  39              	.include "words/2drop.s"
   1 06da C046C006 	CODEWORD "2drop",2DROP @ ( 2 1 -- )
   1      00000000 
   1      00000532 
   1      64726F70 
   1      C046F006 
   2 06f0 07F10407 	  add psp, #4
   3 06f4 57F8046B 	  loadtos
   4 06f8 A5E0     	NEXT
  40              	.include "words/2over.s"
   1 06fa C046E006 	CODEWORD "2over", 2OVER @ ( 4 3 2 1 -- 4 3 2 1 4 3 )
   1      00000000 
   1      00000532 
ARM GAS  amforth.asm 			page 20


   1      6F766572 
   1      C0461007 
   2 0710 B868     	  ldr r0, [psp, #8]
   3 0712 47F8046D 	  savetos
   4 0716 A7F10407 	  sub psp, #4
   5 071a 3860     	  str r0, [psp]
   6 071c FE68     	  ldr tos, [psp, #12]  
   7 071e 92E0     	NEXT
  41              	.include "words/2r-fetch.s"
   1 0720 00070000 	CODEWORD "2r@", 2R_FETCH @ Copies the two top elements of returnsteack
   1      00000000 
   1      03327240 
   1      30070000 
   2 0730 47F8046D 	  savetos
   3 0734 019E     	  ldr tos, [sp, #4]
   4 0736 47F8046D 	  savetos
   5 073a 009E     	  ldr tos, [sp]
   6 073c 83E0     	NEXT
  42              	.include "words/2to-r.s"
   1 073e C0462407 	CODEWORD "2>r", 2TO_R @ Puts the two top elements of stack on returnstack.
   1      00000000 
   1      00000332 
   1      3E725007 
   1      0000
   2 0750 01CF     	  ldm psp!, {r0}
   3 0752 01B4     	  push {r0}
   4 0754 40B4     	  push {tos}
   5 0756 40CF     	  ldm psp!, {tos}
   6 0758 75E0     	NEXT
  43              	.include "words/2r-from.s"
   1 075a C0464407 	CODEWORD "2r>", 2R_FROM @ Fetches back two elements of returnstack.
   1      00000000 
   1      00000332 
   1      723E6C07 
   1      0000
   2 076c 47F8046D 	  savetos
   3 0770 40BC     	  pop {tos}
   4 0772 01BC     	  pop {r0}
   5 0774 A7F10407 	  sub psp, #4
   6 0778 3860     	  str r0, [psp]
   7 077a 64E0     	NEXT
  44              	
  45              	
  46              	.include "words/2-slash.s"
   1 077c 60070000 	CODEWORD "2/", 2SLASH @ ( n -- n/2 )
   1      00000000 
   1      02322F00 
   1      8C070000 
   2 078c 4FEA6606 	  asr tos, tos, #1
   3 0790 59E0     	NEXT
  47              	.include "words/2-star.s"
   1 0792 C0468007 	CODEWORD "2*", 2STAR @ ( n -- n*2 )
   1      00000000 
   1      00000232 
   1      2A00A407 
   1      0000
   2 07a4 06EB0606 	  add tos, tos
ARM GAS  amforth.asm 			page 21


   3 07a8 4DE0     	NEXT
  48              	.include "words/d-2star.s"
   1              	@------------------------------------------------------------------------------
   2 07aa C0469807 	  CODEWORD "d2*", D2STAR
   2      00000000 
   2      00000364 
   2      322ABC07 
   2      0000
   3              	@------------------------------------------------------------------------------
   4 07bc 3868     	  ldr r0, [psp]
   5 07be 0018     	  adds r0, r0
   6 07c0 7641     	  adcs tos, tos
   7 07c2 3860     	  str r0, [psp]
   8 07c4 3FE0     	NEXT
  49              	.include "words/d-2slash.s"
   1              	@------------------------------------------------------------------------------
   2 07c6 C046B007 	  CODEWORD "d2/", D2SLASH
   2      00000000 
   2      00000364 
   2      322FD807 
   2      0000
   3              	@------------------------------------------------------------------------------
   4 07d8 3868     	  ldr r0, [psp]
   5 07da F107     	  lsls r1, tos, #31 @ Prepare Carry
   6 07dc 7610     	  asrs tos, #1     @ Shift signed high part right
   7 07de 4008     	  lsrs r0, #1       @ Shift low part
   8 07e0 0843     	  orrs r0, r1
   9 07e2 3860     	  str r0, [psp]
  10 07e4 2FE0     	NEXT
  50              	.include "words/dabs.s"
   1 07e6 C046CC07 	COLON "dabs", DABS
   1      00000000 
   1      00000464 
   1      61627300 
   1      C0464008 
   2 07fc 78000000 	  .word XT_DUP,XT_ZEROLESS, XT_DOCONDBRANCH,DABS_LEAVE
   2      20050000 
   2      720F0000 
   2      10080000 
   3 080c 24080000 	    .word XT_DNEGATE
   4              	DABS_LEAVE:
   5 0810 24000000 	  .word XT_EXIT
   6              	
  51              	.include "words/dnegate.s"
   1              	@------------------------------------------------------------------------------
   2 0814 EC070000 	  CODEWORD "dnegate", DNEGATE
   2      00000000 
   2      07646E65 
   2      67617465 
   2      28080000 
   3              	@------------------------------------------------------------------------------
   4              	
   5 0828 00F001F8 	  bl dnegate
   6 082c 0BE0     	NEXT
   7              	
   8              	dnegate:
   9 082e 00B5     	  push {lr}
ARM GAS  amforth.asm 			page 22


  10 0830 3868     	  ldr r0, [psp]
  11 0832 0021     	  movs r1, #0
  12 0834 C043     	  mvns r0, r0
  13 0836 F643     	  mvns tos, tos
  14 0838 0130     	  adds r0, #1
  15 083a 4E41     	  adcs tos, r1
  16 083c 3860     	  str r0, [psp]
  17 083e 00BD     	  pop {pc}
  52              	
  53              	DOCOLON: 
  54 0840 4DF8049D 	        push {FORTHIP}
  55 0844 C146     	        mov FORTHIP, FORTHW
  56              	DO_NEXT:
  57 0846 59F8048B 	        ldr FORTHW, [FORTHIP], #4
  58              	DO_EXECUTE:
  59 084a 58F8040B 	        ldr r0, [FORTHW], #4
  60 084e 8746     	        mov pc, r0
  61              	
  62              	.include "words/d-plus.s"
   1              	@------------------------------------------------------------------------------
   2 0850 18080000 	  CODEWORD "d+", DPLUS @ ( 1L 1H 2L 2H )
   2      00000000 
   2      02642B00 
   2      60080000 
   3              	@------------------------------------------------------------------------------
   4 0860 07CF     	  ldm psp!, {r0, r1, r2}
   5 0862 1218     	  adds r2, r0
   6 0864 4E41     	  adcs tos, r1
   7 0866 043F     	  subs psp, #4
   8 0868 3A60     	  str r2, [psp]
   9 086a ECE7     	NEXT
  63              	.include "words/d-minus.s"
   1              	@------------------------------------------------------------------------------
   2 086c 54080000 	  CODEWORD "d-", DMINUS @ ( 1L 1H 2L 2H )
   2      00000000 
   2      02642D00 
   2      7C080000 
   3              	@------------------------------------------------------------------------------
   4 087c 07CF     	  ldm psp!, {r0, r1, r2}
   5 087e 121A     	  subs r2, r0     @  Low-part first
   6 0880 B141     	  sbcs r1, tos   @ High-part with carry
   7 0882 0E00     	  movs tos, r1
   8              	
   9 0884 043F     	  subs psp, #4
  10 0886 3A60     	  str r2, [psp]
  11 0888 DDE7     	NEXT
  64              	.include "words/2dup.s"
   1 088a C0467008 	CODEWORD "2dup", 2DUP @ ( 2 1 -- 2 1 2 1 )
   1      00000000 
   1      00000432 
   1      64757000 
   1      C046A008 
   2 08a0 3868     	  ldr r0, [psp]
   3 08a2 47F8046D 	  savetos
   4 08a6 A7F10407 	  sub psp, #4
   5 08aa 3860     	  str r0, [psp]
   6 08ac CBE7     	NEXT
ARM GAS  amforth.asm 			page 23


  65              	.include "words/double.s"
   1              	
   2              	
   3              	@------------------------------------------------------------------------------
   4 08ae C0469008 	  CODEWORD  "um*", UMSTAR
   4      00000000 
   4      00000375 
   4      6D2AC008 
   4      0000
   5              	  @ Multiply unsigned 32*32 = 64
   6              	  @ ( u u -- ud )
   7              	@------------------------------------------------------------------------------
   8 08c0 3868     	    ldr r0, [psp]  @ To be calculated: Tos * r0
   9 08c2 A6FB0006 	    umull r0, tos, tos, r0
  10 08c6 3860     	    str r0, [psp]
  11 08c8 BDE7     	    NEXT
  12              	
  13              	@------------------------------------------------------------------------------
  14 08ca C046B408 	  CODEWORD  "m*", MSTAR
  14      00000000 
  14      0000026D 
  14      2A00DC08 
  14      0000
  15              	  @ Multiply signed 32*32 = 64
  16              	  @ ( n n -- d )
  17              	@------------------------------------------------------------------------------
  18 08dc 3868     	    ldr r0, [psp]
  19 08de 86FB0006 	    smull r0, tos, tos, r0
  20 08e2 3860     	    str r0, [psp]
  21 08e4 AFE7     	    NEXT
  22              	
  23              	@------------------------------------------------------------------------------
  24 08e6 C046D008 	  CODEWORD  "ud/mod", UDSLASHMOD
  24      00000000 
  24      00000675 
  24      642F6D6F 
  24      6400FC08 
  25              	         @ Unsigned divide 64/64 = 64 remainder 64
  26              	         @ ( ud1 ud2 -- ud ud)
  27              	         @ ( 1L 1H 2L tos: 2H -- Rem-L Rem-H Quot-L tos: Quot-H )
  28              	@------------------------------------------------------------------------------
  29 08fc 00F001F8 	  bl ud_slash_mod
  30 0900 A1E7     	NEXT
  31              	
  32              	ud_slash_mod:
  33 0902 30B4     	   push {r4, r5}
  34              	
  35              	   @ ( DividendL DividendH DivisorL DivisorH -- RemainderL RemainderH ResultL ResultH )
  36              	   @   8         4         0        tos      -- 8          4          0       tos
  37              	
  38              	
  39              	   @ Shift-High Shift-Low Dividend-High Dividend-Low
  40              	   @         r3        r2            r1           r0
  41              	
  42 0904 0023     	   movs r3, #0
  43 0906 0022     	   movs r2, #0
  44 0908 7968     	   ldr  r1, [psp, #4]
ARM GAS  amforth.asm 			page 24


  45 090a B868     	   ldr  r0, [psp, #8]
  46              	
  47              	   @ Divisor-High Divisor-Low
  48              	   @          r5           r4
  49              	
  50              	ud_slash_mod_internal:
  51 090c 3500     	   movs r5, tos
  52 090e 3C68     	   ldr  r4, [psp, #0]
  53              	
  54              	   @ For this long division, we need 64 individual division steps.
  55 0910 4FF04006 	   mov tos, #64
  56              	
  57              	3:
  58              	    @ Shift the long chain of four registers.
  59 0914 4000     	    lsls r0, #1
  60 0916 4941     	    adcs r1, r1
  61 0918 5241     	    adcs r2, r2
  62 091a 5B41     	    adcs r3, r3
  63              	
  64              	    @ Compare Divisor with top two registers
  65 091c AB42     	    cmp r3, r5 @ Check high part first
  66 091e 02D8     	    bhi 1f
  67 0920 04D3     	    blo 2f
  68              	
  69 0922 A242     	    cmp r2, r4 @ High part is identical. Low part decides.
  70 0924 02D3     	    blo 2f
  71              	
  72              	    @ Subtract Divisor from two top registers
  73 0926 121B     	1:  subs r2, r4 @ Subtract low part
  74 0928 AB41     	    sbcs r3, r5 @ Subtract high part with carry
  75              	
  76              	    @ Insert a bit into Result which is inside LSB of the long register.
  77 092a 0130     	    adds r0, #1
  78              	2:
  79              	
  80 092c 013E     	   subs tos, #1
  81 092e F1D1     	   bne 3b
  82              	
  83              	   @ Now place all values to their destination.
  84 0930 0E00     	   movs tos, r1       @ Result-High
  85 0932 3860     	   str  r0, [psp, #0] @ Result-Low
  86 0934 7B60     	   str  r3, [psp, #4] @ Remainder-High
  87 0936 BA60     	   str  r2, [psp, #8] @ Remainder-Low
  88              	
  89 0938 30BC     	   pop {r4, r5}
  90 093a 7047     	   bx lr
  91              	
  92              	@------------------------------------------------------------------------------
  93 093c EC080000 	  CODEWORD  "d/mod", DSLASHMOD
  93      00000000 
  93      05642F6D 
  93      6F64C046 
  93      50090000 
  94              	              @ Signed symmetric divide 64/64 = 64 remainder 64
  95              	              @ ( d1 d2 -- d d )
  96 0950 00F001F8 	  bl d_slash_mod
  97 0954 77E7     	NEXT
ARM GAS  amforth.asm 			page 25


  98              	
  99              	d_slash_mod:  @ ( 1L 1H 2L tos: 2H -- Rem-L Rem-H Quot-L tos: Quot-H )
 100              	@------------------------------------------------------------------------------
 101              	  @ Check Divisor
 102 0956 00B5     	  push {lr}
 103 0958 F017     	  movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 104 095a 19D0     	  beq 2f
 105              	    @ ? / -
 106 095c FFF767FF 	    bl dnegate
 107 0960 FFF7A1FE 	    bl dswap
 108 0964 F017     	    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 109 0966 0CD0     	    beq 1f
 110              	    @ - / -
 111 0968 FFF761FF 	    bl dnegate
 112 096c FFF79BFE 	    bl dswap
 113 0970 FFF7C7FF 	    bl ud_slash_mod
 114              	
 115 0974 FFF797FE 	    bl dswap
 116 0978 FFF759FF 	    bl dnegate @ Negative remainder
 117 097c FFF793FE 	    bl dswap
 118 0980 00BD     	    pop {pc}
 119              	
 120              	1:  @ + / -
 121 0982 FFF790FE 	    bl dswap
 122 0986 FFF7BCFF 	    bl ud_slash_mod
 123 098a FFF750FF 	    bl dnegate  @ Negative result
 124 098e 00BD     	    pop {pc}
 125              	
 126              	2:  @ ? / +
 127 0990 FFF789FE 	    bl dswap
 128 0994 F017     	    movs r0, tos, asr #31 @ Turn MSB into 0xffffffff or 0x00000000
 129 0996 0ED0     	    beq 3f
 130              	    @ - / +
 131 0998 FFF749FF 	    bl dnegate
 132 099c FFF783FE 	    bl dswap
 133              	
 134 09a0 FFF7AFFF 	    bl ud_slash_mod
 135              	
 136 09a4 FFF743FF 	    bl dnegate @ Negative result
 137 09a8 FFF77DFE 	    bl dswap
 138 09ac FFF73FFF 	    bl dnegate @ Negative remainder
 139 09b0 FFF779FE 	    bl dswap
 140 09b4 00BD     	    pop {pc}
 141              	
 142              	3:  @ + / +
 143 09b6 FFF776FE 	    bl dswap
 144 09ba FFF7A2FF 	    bl ud_slash_mod
 145 09be 00BD     	    pop {pc}
 146              	
 147              	@------------------------------------------------------------------------------
 148 09c0 40090000 	  CODEWORD  "d/", DSLASH
 148      00000000 
 148      02642F00 
 148      D0090000 
 149              	@------------------------------------------------------------------------------
 150 09d0 FFF7C1FF 	  bl d_slash_mod
 151 09d4 07CF     	  ldm psp!, {r0, r1, r2}
ARM GAS  amforth.asm 			page 26


 152 09d6 043F     	  subs psp, #4
 153 09d8 3860     	  str r0, [psp]
 154 09da 34E7     	  NEXT
 155              	@------------------------------------------------------------------------------
 156              	@ --- Double memory ---
 157              	@------------------------------------------------------------------------------
 158              	
 159              	@------------------------------------------------------------------------------
 160 09dc C4090000 	  CODEWORD  "2!",2STORE @ Store ( d addr -- )
 160      00000000 
 160      02322100 
 160      EC090000 
 161              	@------------------------------------------------------------------------------
 162 09ec 06CF     	  ldmia psp!, {r1, r2}
 163 09ee 3160     	  str r1, [tos]
 164 09f0 7260     	  str r2, [tos, #4]
 165 09f2 40CF     	  ldm psp!, {tos}
 166 09f4 27E7     	NEXT
 167              	
 168              	@------------------------------------------------------------------------------
 169 09f6 C046E009 	  CODEWORD  "2@",2FETCH @ Fetch ( addr -- d )
 169      00000000 
 169      00000232 
 169      4000080A 
 169      0000
 170              	@------------------------------------------------------------------------------
 171 0a08 043F     	  subs psp, #4
 172 0a0a 7068     	  ldr r0, [tos, #4]
 173 0a0c 3860     	  str r0, [psp]
 174 0a0e 3668     	  ldr tos, [tos]
 175 0a10 19E7     	NEXT
 176              	
 177              	@------------------------------------------------------------------------------
 178              	@ --- Double comparisions ---
 179              	@------------------------------------------------------------------------------
 180              	
 181              	@------------------------------------------------------------------------------
 182 0a12 C046FC09 	  CODEWORD  "d<", DLESS
 182      00000000 
 182      00000264 
 182      3C00240A 
 182      0000
 183              	  @ ( 2L 2H 1L 1H -- Flag )
 184              	  @   8y 4x 0w tos
 185              	@------------------------------------------------------------------------------
 186 0a24 07CF     	  ldm psp!, {r0, r1, r2}
 187              	
 188              	  @ Check High:
 189 0a26 8E42     	  cmp tos, r1
 190 0a28 04DC     	  bgt 2f @ True
 191 0a2a 01D1     	  bne 1f @ False - Not bigger, not equal --> Lower.
 192              	  @ Fall through if high part is equal
 193              	
 194              	  @ Check Low:
 195 0a2c 9042     	  cmp r0, r2
 196 0a2e 01DC     	  bgt 2f
 197              	
ARM GAS  amforth.asm 			page 27


 198              	@ False:
 199 0a30 0026     	1:movs tos, #0
 200 0a32 08E7     	NEXT
 201              	
 202              	@ True
 203 0a34 0026     	2:movs tos, #0
 204 0a36 F643     	  mvns tos, tos
 205 0a38 05E7     	NEXT
 206              	
 207              	@------------------------------------------------------------------------------
 208 0a3a C046180A 	  CODEWORD  "d>", DGREATER
 208      00000000 
 208      00000264 
 208      3E004C0A 
 208      0000
 209              	  @ ( 2L 2H 1L 1H -- Flag )
 210              	  @   8y 4x 0w tos
 211              	@------------------------------------------------------------------------------
 212 0a4c 07CF     	  ldm psp!, {r0, r1, r2}
 213              	
 214              	  @ Check High:
 215 0a4e B142     	  cmp r1, tos
 216 0a50 04DC     	  bgt 2f @ True
 217 0a52 01D1     	  bne 1f @ False - Not bigger, not equal --> Lower.
 218              	  @ Fall through if high part is equal
 219              	
 220              	  @ Check Low:
 221 0a54 8242     	  cmp r2, r0
 222 0a56 01DC     	  bgt 2f
 223              	
 224              	@ False:
 225 0a58 0026     	1:movs tos, #0
 226 0a5a F4E6     	NEXT
 227              	
 228              	@ True
 229 0a5c 0026     	2:movs tos, #0
 230 0a5e F643     	  mvns tos, tos
 231 0a60 F1E6     	NEXT
 232              	
 233              	@------------------------------------------------------------------------------
 234 0a62 C046400A 	  CODEWORD  "d0<", DZEROLESS @ ( 1L 1H -- Flag ) Is double number negative ?
 234      00000000 
 234      00000364 
 234      303C740A 
 234      0000
 235              	@------------------------------------------------------------------------------
 236 0a74 0437     	  adds psp, #4
 237 0a76 F617     	  movs TOS, TOS, asr #31    @ Turn MSB into 0xffffffff or 0x00000000
 238 0a78 E5E6     	NEXT
 239              	
 240              	@------------------------------------------------------------------------------
 241 0a7a C046680A 	  CODEWORD  "d0=", DZEROEQUAL @ ( 1L 1H -- Flag )
 241      00000000 
 241      00000364 
 241      303D8C0A 
 241      0000
 242              	@------------------------------------------------------------------------------
ARM GAS  amforth.asm 			page 28


 243 0a8c 01CF     	  ldm psp!, {r0}
 244 0a8e 0028     	  cmp r0, #0
 245 0a90 01D0     	  beq 1f
 246 0a92 0026     	    movs tos, #0
 247 0a94 D7E6     	NEXT
 248              	
 249 0a96 013E     	1:subs tos, #1
 250 0a98 B641     	  sbcs tos, tos
 251 0a9a D4E6     	NEXT
 252              	
 253              	@------------------------------------------------------------------------------
 254 0a9c 800A0000 	  CODEWORD  "d=", DEQUAL @ ( 1L 1H 2L 2H -- Flag )
 254      00000000 
 254      02643D00 
 254      AC0A0000 
 255              	@------------------------------------------------------------------------------
 256 0aac 07CF     	  ldm psp!, {r0, r1, r2}
 257              	
 258 0aae 9042     	  cmp r0, r2
 259 0ab0 01D0     	  beq 1f
 260 0ab2 0026     	    movs tos, #0
 261 0ab4 C7E6     	NEXT
 262              	
 263 0ab6 761A     	1:subs tos, r1       @ Z=equality; if equal, TOS=0
 264 0ab8 013E     	  subs tos, #1      @ Wenn es Null war, gibt es jetzt einen Überlauf
 265 0aba B641     	  sbcs tos, tos
 266 0abc C3E6     	NEXT
 267              	
 268 0abe C046A00A 	CODEWORD  "s>d", S2D
 268      00000000 
 268      00000373 
 268      3E64D00A 
 268      0000
 269 0ad0 47F8046D 	  savetos
 270 0ad4 F617     	  movs tos, tos, asr #31
 271 0ad6 B6E6     	NEXT
  66              	.include "words/base.s"
   1 0ad8 C40A0000 	  USER "base", BASE, USER_BASE
   1      01010000 
   1      04626173 
   1      6500C046 
   1      120F0000 
  67              	.include "words/plus.s"
   1              	@ -----------------------------------------------------------------------------
   2 0af0 DC0A0000 	  CODEWORD "+", PLUS @ ( x1 x2 -- x1+x2 )
   2      00000000 
   2      012BC046 
   2      000B0000 
   3              	@ -----------------------------------------------------------------------------
   4 0b00 01CF     	  ldm psp!, {r0}
   5 0b02 3618     	  adds tos, r0
   6 0b04 9FE6     	  NEXT
  68              	.include "words/minus.s"
   1              	@ -----------------------------------------------------------------------------
   2 0b06 C046F40A 	  CODEWORD "-", MINUS @ ( x1 x2 -- x1-x2 )
   2      00000000 
   2      0000012D 
ARM GAS  amforth.asm 			page 29


   2      C046180B 
   2      0000
   3              	                      @ Subtracts x2 from x1.
   4              	@ -----------------------------------------------------------------------------
   5 0b18 01CF     	  ldm psp!, {r0}
   6 0b1a 861B     	  subs tos, r0, tos
   7 0b1c 93E6     	NEXT
  69              	.include "words/1-plus.s"
   1 0b1e C0460C0B 	CODEWORD "1+", 1PLUS @ ( u -- u+1 )
   1      00000000 
   1      00000231 
   1      2B00300B 
   1      0000
   2 0b30 06F10106 	  add tos, #1
   3 0b34 87E6     	NEXT
  70              	.include "words/1-minus.s"
   1 0b36 C046240B 	CODEWORD "1-", 1MINUS @ ( u -- u-1 )
   1      00000000 
   1      00000231 
   1      2D00480B 
   1      0000
   2 0b48 A6F10106 	  sub tos, #1
   3 0b4c 7BE6     	NEXT
  71              	.include "words/2-plus.s"
   1 0b4e C0463C0B 	CODEWORD "2+", 2PLUS @ ( u -- u+1 )
   1      00000000 
   1      00000232 
   1      2B00600B 
   1      0000
   2 0b60 06F10206 	  add tos, #2
   3 0b64 6FE6     	NEXT
  72              	.include "words/2-minus.s"
   1 0b66 C046540B 	CODEWORD "2-", 2MINUS @ ( u -- u-1 )
   1      00000000 
   1      00000232 
   1      2D00780B 
   1      0000
   2 0b78 A6F10206 	  sub tos, #2
   3 0b7c 63E6     	NEXT
  73              	.include "words/cell-plus.s"
   1 0b7e C0466C0B 	CODEWORD "cell+", CELLPLUS @ ( x -- x+4 ) 
   1      00000000 
   1      00000563 
   1      656C6C2B 
   1      C046940B 
   2 0b94 0436     	  adds tos, #4
   3 0b96 56E6     	NEXT
  74              	.include "words/cells.s"
   1              	@ -----------------------------------------------------------------------------
   2 0b98 840B0000 	  CODEWORD "cells", CELLS @ ( x -- 4*x ) 
   2      00000000 
   2      0563656C 
   2      6C73C046 
   2      AC0B0000 
   3              	@ -----------------------------------------------------------------------------
   4 0bac B600     	  lsls tos, #2
   5 0bae 4AE6     	NEXT
ARM GAS  amforth.asm 			page 30


  75              	
  76              	.include "words/state.s"
   1              	
   2 0bb0 9C0B0000 	VARIABLE "state", STATE
   2      01010000 
   2      05737461 
   2      7465C046 
   2      DA0E0000 
  77              	.include "words/tib.s"
   1              	
   2 0bc8 B40B0000 	VARIABLE "#tib", NUMBERTIB
   2      01010000 
   2      04237469 
   2      6200C046 
   2      DA0E0000 
   3              	
   4 0be0 CC0B0000 	CODEWORD "tib", TIB 
   4      00000000 
   4      03746962 
   4      F00B0000 
   5 0bf0 47F8046D 	  savetos
   6 0bf4 004E     	  ldr tos, =RAM_lower_refill_buf
   7 0bf6 26E60000 	NEXT
   7      0000
  78              	.include "words/cold.s"
   1              	
   2 0bfc E40B0000 	CODEWORD "cold", COLD
   2      00000000 
   2      04636F6C 
   2      6400C046 
   2      100C0000 
   3              	
   4 0c10 6D48     	   ldr r0, =RAM_upper_returnstack
   5 0c12 8546     	   mov sp, r0
   6              	
   7 0c14 6D4F     	   ldr psp, =RAM_upper_datastack
   8              	
   9 0c16 DFF8B881 	   ldr FORTHW, =XT_WARM
  10              	
  11 0c1a 16E6     	  b DO_EXECUTE
  79              	.include "words/quit.s"
   1 0c1c 000C0000 	COLON "quit", QUIT
   1      00000000 
   1      04717569 
   1      7400C046 
   1      40080000 
   2              	
   3 0c30 AC2A0000 	    .word XT_LP0,XT_LP,XT_STORE
   3      CC2A0000 
   3      30020000 
   4              	#    .dw XT_SP0
   5              	#    .dw XT_SP_STORE
   6              	#    .dw XT_RP0
   7              	#    .dw XT_RP_STORE
   8 0c3c 9C110000 	    .word XT_LBRACKET
   9              	
  10              	PFA_QUIT2:
ARM GAS  amforth.asm 			page 31


  11 0c40 C00B0000 	    .word XT_STATE, XT_FETCH,XT_ZEROEQUAL
  11      1C020000 
  11      F0040000 
  12 0c4c 720F0000 	    .word XT_DOCONDBRANCH, PFA_QUIT4
  12      580C0000 
  13 0c54 F0170000 	    .word XT_PROMPTREADY
  14              	PFA_QUIT4:
  15 0c58 34150000 	    .word XT_REFILL
  16 0c5c 80170000 	    .word XT_PROMPTINPUT
  17 0c60 720F0000 	    .word XT_DOCONDBRANCH,PFA_QUIT3
  17      A40C0000 
  18 0c68 860F0000 	    .word XT_DOLITERAL
  19 0c6c B8250000 	    .word XT_INTERPRET
  20 0c70 44180000 	    .word XT_CATCH
  21 0c74 E0000000 	    .word XT_QDUP
  22 0c78 720F0000 	    .word XT_DOCONDBRANCH,PFA_QUIT3
  22      A40C0000 
  23 0c80 78000000 		.word XT_DUP
  24 0c84 860F0000 		.word XT_DOLITERAL, -2, XT_LESS
  24      FEFFFFFF 
  24      78050000 
  25 0c90 720F0000 		.word XT_DOCONDBRANCH, PFA_QUIT5
  25      9C0C0000 
  26 0c98 18170000 		.word XT_PROMPTERROR
  27              	PFA_QUIT5:
  28 0c9c 680F0000 		.word XT_DOBRANCH, PFA_QUIT
  28      300C0000 
  29              	PFA_QUIT3:
  30 0ca4 AC170000 	    .word XT_PROMPTOK
  31 0ca8 680F0000 	    .word XT_DOBRANCH,PFA_QUIT2
  31      400C0000 
  32              	
  80              	.include "words/execute.s"
   1              	
   2 0cb0 200C0000 	CODEWORD "execute", EXECUTE
   2      00000000 
   2      07657865 
   2      63757465 
   2      C40C0000 
   3 0cc4 B046     	    mov FORTHW, tos
   4 0cc6 57F8046B 	    loadtos
   5 0cca BEE5     	    b DO_EXECUTE
  81              	
  82              	.include "words/key.s"
   1 0ccc B40C0000 	  DEFER "key", KEY, XT_KEY_PAUSE
   1      C0000000 
   1      036B6579 
   1      040F0000 
   1      70090000 
   2              	
   3 0cec 40080000 	NONAME KEY_PAUSE
   4 0cf0 A00D0000 	    .word XT_PAUSE,XT_SERIAL_KEYQ, XT_DOCONDBRANCH, PFA_KEY_PAUSE
   4      9C340000 
   4      720F0000 
   4      F00C0000 
   5 0d00 5C340000 	    .word XT_SERIAL_KEY
   6 0d04 24000000 	    .word XT_EXIT
ARM GAS  amforth.asm 			page 32


  83              	.include "words/keyq.s"
   1 0d08 D00C0000 	  DEFER "key?",KEYQ, XT_SERIAL_KEYQ
   1      C0000000 
   1      046B6579 
   1      3F00C046 
   1      040F0000 
   2              	
  84              	.include "words/emit.s"
   1 0d2c 0C0D0000 	  DEFER "emit", EMIT, XT_EMIT_PAUSE
   1      C0000000 
   1      04656D69 
   1      7400C046 
   1      040F0000 
   2              	
   3 0d50 40080000 	NONAME EMIT_PAUSE
   4 0d54 A00D0000 	    .word XT_PAUSE,XT_SERIAL_EMITQ, XT_DOCONDBRANCH, PFA_EMIT_PAUSE
   4      3C340000 
   4      720F0000 
   4      540D0000 
   5 0d64 08340000 	    .word XT_SERIAL_EMIT
   6 0d68 24000000 	    .word XT_EXIT
  85              	.include "words/emitq.s"
   1 0d6c 300D0000 	  DEFER "emit?",EMITQ, XT_SERIAL_EMITQ
   1      C0000000 
   1      05656D69 
   1      743FC046 
   1      040F0000 
  86              	.include "words/pause.s"
   1 0d90 700D0000 	  DEFER "pause",PAUSE, XT_NOOP
   1      C0000000 
   1      05706175 
   1      7365C046 
   1      040F0000 
  87              	.include "words/nop.s"
   1 0db4 940D0000 	CODEWORD "nop", NOOP
   1      00000000 
   1      036E6F70 
   1      C40D0000 
   2 0dc4 3FE50000 	NEXT
   2      00080000 
   2      00040000 
   2      D8100000 
  88              	.include "words/bounds.s"
   1 0dd4 B80D0000 	COLON "bounds", BOUNDS
   1      00000000 
   1      06626F75 
   1      6E647300 
   1      40080000 
   2 0de8 A8000000 	  .word XT_OVER,XT_PLUS,XT_SWAP,XT_EXIT
   2      FC0A0000 
   2      60000000 
   2      24000000 
  89              	
  90              	.include "words/do-do.s"
   1 0df8 FC0D0000 	HEADLESS DODO
   2              	 @ save loopsys
   3 0dfc 2DE90018 	 push {rloopindex, rlooplimit}
ARM GAS  amforth.asm 			page 33


   4              	
   5              	 @ create new loopsys from stack
   6 0e00 B346     	 mov rloopindex, tos
   7 0e02 57F8046B 	 loadtos
   8 0e06 B446     	 mov rlooplimit, tos
   9 0e08 57F8046B 	 loadtos
  10              	
  11 0e0c 0CF1004C 	 add rlooplimit, #0x80000000
  12 0e10 ABEB0C0B 	 sub rloopindex, rlooplimit
  13 0e14 17E5     	NEXT
  91              	.include "words/do-loop.s"
   1 0e16 1A0E0000 	HEADLESS DOLOOP
   2 0e1a 4FF00100 	  ldr r0, =#1
   3 0e1e 04E0     	  b PFA_DOPLUSLOOP_INTERN
   4              	
   5 0e20 240E0000 	HEADLESS DOPLUSLOOP
   6 0e24 3046     	  mov r0, tos
   7 0e26 57F8046B 	  loadtos
   8              	
   9              	PFA_DOPLUSLOOP_INTERN:
  10 0e2a 1BEB000B 	  adds rloopindex, r0
  11 0e2e 02D6     	  bvs PFA_DOPLUSLOOP_LEAVE
  12 0e30 D9F80090 	  ldr FORTHIP, [FORTHIP]
  13 0e34 07E5     	NEXT
  14              	
  15              	PFA_DOPLUSLOOP_LEAVE:
  16 0e36 09F10409 	  add FORTHIP, #4
  17 0e3a BDE80018 	  pop {rloopindex, rlooplimit}
  18 0e3e 02E5     	NEXT
  92              	.include "words/unloop.s"
   1 0e40 D80D0000 	  CODEWORD "unloop", UNLOOP 
   1      00000000 
   1      06756E6C 
   1      6F6F7000 
   1      540E0000 
   2 0e54 BDE80018 	  pop {rloopindex, rlooplimit}
   3 0e58 F5E4     	  NEXT
  93              	.include "words/i.s"
   1              	@------------------------------------------------------------------------------
   2 0e5a C046440E 	  CODEWORD "i", I @ Innermost loop index
   2      00000000 
   2      00000169 
   2      C0466C0E 
   2      0000
   3              	@------------------------------------------------------------------------------
   4 0e6c 47F8046D 	  savetos
   5 0e70 0BEB0C06 	  add tos, rloopindex,rlooplimit
   6 0e74 E7E4     	NEXT
  94              	.include "words/j.s"
   1              	@------------------------------------------------------------------------------
   2 0e76 C046600E 	  CODEWORD "j", J @ Second loop index
   2      00000000 
   2      0000016A 
   2      C046880E 
   2      0000
   3              	@------------------------------------------------------------------------------
   4 0e88 47F8046D 	  savetos
ARM GAS  amforth.asm 			page 34


   5 0e8c 03BC     	  pop {r0,r1}
   6 0e8e 03B4     	  push {r0,r1}
   7 0e90 00EB0106 	  add tos, r0, r1
   8 0e94 D7E4     	NEXT
  95              	
  96              	.include "words/aligned.s"
   1              	
   2 0e96 C0467C0E 	CODEWORD "aligned", ALIGNED
   2      00000000 
   2      00000761 
   2      6C69676E 
   2      6564AC0E 
   3 0eac 0336     	    adds tos, tos, #3
   4 0eae 0320     	    movs r0, #3
   5 0eb0 C043     	    mvns r0, r0
   6 0eb2 0640     	    ands tos, tos, r0
   7 0eb4 C7E4     	NEXT
  97              	.include "words/do-sliteral.s"
   1              	
   2 0eb6 40080000 	NONAME DOSLITERAL
   3              	
   4 0eba 50010000 	  .word XT_R_FROM,XT_COUNT,XT_2DUP,XT_PLUS,XT_ALIGNED,XT_TO_R
   4      28280000 
   4      9C080000 
   4      FC0A0000 
   4      A80E0000 
   5 0ed2 24000000 	  .word XT_EXIT
  98              	.include "words/do-variable.s"
   1              	
   2 0ed6 DA0E0000 	HEADLESS DOVARIABLE
   3 0eda 47F8046D 	  savetos
   4 0ede D8F80060 	  ldr tos, [FORTHW]
   5 0ee2 B0E4     	NEXT
  99              	.include "words/do-data.s"
   1              	
   2 0ee4 E80E0000 	HEADLESS DODATA
   3 0ee8 47F8046D 	  savetos
   4 0eec 4646     	  mov tos, FORTHW
   5 0eee AAE4     	NEXT
 100              	.include "words/do-value.s"
   1 0ef0 F40E0000 	HEADLESS DOVALUE
   2 0ef4 47F8046D 	  savetos
   3 0ef8 D8F80060 	  ldr tos, [FORTHW]
   4 0efc 3668     	  ldr tos, [tos]
   5 0efe A2E4     	NEXT
 101              	.include "words/do-defer.s"
   1 0f00 040F0000 	HEADLESS DODEFER
   2 0f04 D8F80080 	  ldr FORTHW, [FORTHW]
   3 0f08 D8F80080 	  ldr FORTHW, [FORTHW]
   4 0f0c 9DE4     	  b DO_EXECUTE
 102              	.include "words/do-user.s"
   1 0f0e 120F0000 	HEADLESS DOUSER
   2 0f12 47F8046D 	  savetos
   3 0f16 D8F80060 	  ldr tos, [FORTHW]
   4 0f1a 5644     	  add tos, up
   5 0f1c 93E4     	NEXT
 103              	.include "words/do-does.s"
ARM GAS  amforth.asm 			page 35


   1 0f1e 220F0000 	HEADLESS DODOES
   2 0f22 47F8046D 	  savetos
   3 0f26 4646     	  mov tos, FORTHW
   4 0f28 4DF8049D 	  push {FORTHIP}
   5 0f2c 58F8049C 	  ldr FORTHIP, [FORTHW, #-4]
   6 0f30 09F10409 	  add FORTHIP, #4
   7 0f34 87E4     	NEXT
 104              	.include "words/up.s"
   1              	
   2 0f36 C0469C0E 	CODEWORD  "up@", UP_FETCH
   2      00000000 
   2      00000375 
   2      7040480F 
   2      0000
   3 0f48 47F8046D 	  savetos
   4 0f4c 5646     	  mov tos, up
   5 0f4e 7AE4     	NEXT
   6              	
   7 0f50 3C0F0000 	CODEWORD  "up!", UP_STORE
   7      00000000 
   7      03757021 
   7      600F0000 
   8 0f60 B246     	  mov up, tos
   9 0f62 57F8046B 	  loadtos
  10 0f66 6EE4     	NEXT
 105              	
 106              	.include "words/1ms.s"
 107              	.include "words/dobranch.s"
   1 0f68 6C0F0000 	HEADLESS DOBRANCH
   2 0f6c D9F80090 	  ldr FORTHIP, [FORTHIP]
   3 0f70 69E4     	NEXT
 108              	.include "words/docondbranch.s"
   1 0f72 760F0000 	HEADLESS DOCONDBRANCH
   2 0f76 3046     	    mov r0, tos
   3 0f78 57F8046B 	    loadtos
   4 0f7c 0028     	    cmp r0, #0
   5 0f7e F5D0     	    beq PFA_DOBRANCH
   6 0f80 19F10409 	    adds FORTHIP, #4
   7 0f84 5FE4     	NEXT
 109              	.include "words/doliteral.s"
   1 0f86 8A0F0000 	HEADLESS DOLITERAL
   2 0f8a 47F8046D 	    savetos
   3 0f8e D9F80060 	    ldr tos, [FORTHIP]
   4 0f92 19F10409 	    adds FORTHIP, #4
   5 0f96 56E4     	NEXT
 110              	.include "words/compare.s"
   1              	@ -----------------------------------------------------------------------------
   2 0f98 540F0000 	  CODEWORD "compare",COMPARE  @ Compare two strings
   2      00000000 
   2      07636F6D 
   2      70617265 
   2      AC0F0000 
   3              	@ -----------------------------------------------------------------------------
   4 0fac 00F002F8 	  bl compare
   5 0fb0 F643     	  mvns tos,tos
   6 0fb2 48E4     	NEXT
   7              	
ARM GAS  amforth.asm 			page 36


   8              	.if WANT_IGNORECASE==1
   9              	.macro lowercase Register @ Ein Zeichen in einem Register wird auf Lowercase umgestellt.
  10              	  @    Hex Dec  Hex Dec
  11              	  @ A  41  65   61  97  a
  12              	  @ Z  5A  90   7A  122 z
  13              	  cmp \Register, #0x41
  14              	  blo 5f
  15              	  cmp \Register, #0x5B
  16              	  it lo
  17              	  addlo \Register, #0x20
  18              	5:  
  19              	.endm
  20              	.endif
  21              	
  22              	compare:
  23 0fb4 00B5     	  push {lr}
  24              	
  25 0fb6 314657F8 	  popda r1        @ Length of second string
  25      046B
  26 0fbc 01CF     	  ldm psp!, {r0}  @ Length of first  string
  27 0fbe 8842     	  cmp r0, r1
  28 0fc0 02D0     	  beq 1f
  29              	
  30 0fc2 40CF     	    ldm psp!, {tos}
  31 0fc4 0026     	    movs tos, #0
  32 0fc6 00BD     	    pop {pc}
  33              	
  34              	1: @ Lengths are equal. Compare characters.
  35 0fc8 02CF     	   ldm psp!, {r1}  @ Address of first string.
  36              	                   @ TOS contains address of second string.
  37              	
  38              	   @ How many characters to compare left ?
  39 0fca 0028     	2: cmp r0, #0
  40 0fcc 06D0     	   beq 3f
  41              	
  42 0fce 0138     	     subs r0, #1
  43 0fd0 0A5C     	     ldrb r2, [r1, r0]
  44 0fd2 335C     	     ldrb r3, [tos, r0]
  45              	
  46              	.if WANT_IGNORECASE==1
  47              	     lowercase r2
  48              	     lowercase r3
  49              	.endif
  50              	
  51 0fd4 9A42     	     cmp r2, r3
  52 0fd6 F8D0     	     beq 2b
  53              	
  54              	     @ Unequal
  55 0fd8 0026     	     movs tos, #0
  56 0fda 00BD     	     pop {pc}
  57              	
  58              	3: @ Equal !
  59 0fdc 0026     	   movs tos, #0
  60 0fde F643     	   mvns tos, tos
  61 0fe0 00BD     	   pop {pc}
  62              	
 111              	.include "words/num-constants.s"
ARM GAS  amforth.asm 			page 37


   1              	
   2 0fe2 C0469C0F 	CONSTANT "0", ZERO, 0
   2      00000000 
   2      00000130 
   2      C046DA0E 
   2      00000000 
   3 0ff8 E80F0000 	CONSTANT "1", ONE, 1
   3      00000000 
   3      0131C046 
   3      DA0E0000 
   3      01000000 
   4 100c FC0F0000 	CONSTANT "2", TWO, 2
   4      00000000 
   4      0132C046 
   4      DA0E0000 
   4      02000000 
   5 1020 10100000 	CONSTANT "4", FOUR, 4
   5      00000000 
   5      0134C046 
   5      DA0E0000 
   5      04000000 
   6 1034 24100000 	CONSTANT "-1", MINUSONE, -1
   6      00000000 
   6      022D3100 
   6      DA0E0000 
   6      FFFFFFFF 
   7 1048 38100000 	CONSTANT "true", TRUE, -1
   7      00000000 
   7      04747275 
   7      6500C046 
   7      DA0E0000 
   8 1060 4C100000 	CONSTANT "false", FALSE, 0
   8      00000000 
   8      0566616C 
   8      7365C046 
   8      DA0E0000 
 112              	.include "words/n_to_r.s"
   1 1078 64100000 	CODEWORD "n>r", N_TO_R
   1      00000000 
   1      036E3E72 
   1      88100000 
   2 1088 3046     	    mov r0, tos
   3 108a 3146     	    mov r1, tos
   4              	N_TO_R_LOOP:
   5 108c 57F8046B 	    loadtos
   6 1090 40B4     	    push {tos}
   7 1092 0138     	    subs r0,1
   8 1094 FAD1     	    bne N_TO_R_LOOP
   9 1096 02B4     	    push {r1}
  10 1098 57F8046B 	    loadtos
  11 109c FFF7D3BB 	NEXT
 113              	.include "words/n_r_from.s"
   1 10a0 7C100000 	CODEWORD "nr>", N_R_FROM
   1      00000000 
   1      036E723E 
   1      B0100000 
   2 10b0 02BC     	    pop {r1}
ARM GAS  amforth.asm 			page 38


   3 10b2 0846     	    mov r0, r1
   4 10b4 47F8046D 	    savetos
   5              	N_R_FROM_LOOP:
   6 10b8 40BC     	    pop {tos}
   7 10ba 47F8046D 	    savetos
   8 10be 0138     	    subs r0,1
   9 10c0 FAD1     	    bne N_R_FROM_LOOP
  10 10c2 0E46     	    mov tos, r1
  11 10c4 FFF7BFBB 	NEXT
  31              	.include "dict_secs.inc"
   1              	#
   2              	# all secondaries / colon words
   3              	# they represend data instead of code
   4              	#
   5              	
   6              	.include "words/warm.s"
   1              	
   2 10c8 A4100000 	COLON "warm", WARM
   2      00000000 
   2      04776172 
   2      6D00C046 
   2      40080000 
   3 10dc 04270000 	  .word XT_INIT_RAM
   4 10e0 9C110000 	  .word XT_LBRACKET
   5 10e4 202C0000 	  .word XT_TURNKEY
   6 10e8 2C0C0000 	  .word XT_QUIT
   7 10ec 24000000 	  .word XT_EXIT
   7              	.include "words/cr.s"
   1 10f0 CC100000 	COLON "cr", CR
   1      00000000 
   1      02637200 
   1      40080000 
   2              	
   3 1100 860F0000 	.word XT_DOLITERAL,13,XT_EMIT
   3      0D000000 
   3      3C0D0000 
   4 110c 860F0000 	.word XT_DOLITERAL,10,XT_EMIT
   4      0A000000 
   4      3C0D0000 
   5 1118 24000000 	.word XT_EXIT
   8              	.include "words/bl.s"
   1              	
   2 111c F4100000 	CONSTANT "bl", BL, 32
   2      00000000 
   2      02626C00 
   2      DA0E0000 
   2      20000000 
   9              	.include "words/space.s"
   1              	
   2 1130 20110000 	COLON "space", SPACE
   2      00000000 
   2      05737061 
   2      6365C046 
   2      40080000 
   3              	
   4 1144 28110000 	.word XT_BL,XT_EMIT,XT_EXIT
   4      3C0D0000 
ARM GAS  amforth.asm 			page 39


   4      24000000 
  10              	.include "words/spaces.s"
   1              	
   2 1150 34110000 	COLON "spaces", SPACES
   2      00000000 
   2      06737061 
   2      63657300 
   2      40080000 
   3              	
   4 1164 F00F0000 	.word XT_ZERO, XT_MAX
   4      3C060000 
   5              	SPCS1:
   6 116c 78000000 	  .word XT_DUP,XT_DOCONDBRANCH,SPCS2
   6      720F0000 
   6      88110000 
   7 1178 40110000 	  .word XT_SPACE,XT_1MINUS,XT_DOBRANCH,SPCS1
   7      440B0000 
   7      680F0000 
   7      6C110000 
   8              	SPCS2:  
   9 1188 48000000 	  .word XT_DROP,XT_EXIT
   9      24000000 
  11              	.include "words/left-bracket.s"
   1              	
   2 1190 54110000 	COLON "[", LBRACKET
   2      00000000 
   2      015BC046 
   2      40080000 
   3 11a0 F00F0000 	.word XT_ZERO, XT_STATE, XT_STORE
   3      C00B0000 
   3      30020000 
   4 11ac 24000000 	.word XT_EXIT
  12              	.include "words/l-paren.s"
   1              	
   2 11b0 94110000 	IMMED "(", LPAREN
   2      10000000 
   2      0128C046 
   2      40080000 
   3 11c0 860F0000 	    .word XT_DOLITERAL, 0x29
   3      29000000 
   4 11c8 B01A0000 	    .word XT_PARSE
   5 11cc EC060000 	    .word XT_2DROP
   6 11d0 24000000 	    .word XT_EXIT
  13              	.include "words/decimal.s"
   1              	
   2 11d4 B4110000 	COLON "decimal", DECIMAL
   2      00000000 
   2      07646563 
   2      696D616C 
   2      40080000 
   3 11e8 860F0000 	.word XT_DOLITERAL,10,XT_BASE,XT_STORE,XT_EXIT
   3      0A000000 
   3      E80A0000 
   3      30020000 
   3      24000000 
  14              	.include "words/hex.s"
   1              	
ARM GAS  amforth.asm 			page 40


   2 11fc D8110000 	COLON "hex", HEX
   2      00000000 
   2      03686578 
   2      40080000 
   3 120c 860F0000 	.word XT_DOLITERAL,16,XT_BASE,XT_STORE,XT_EXIT
   3      10000000 
   3      E80A0000 
   3      30020000 
   3      24000000 
  15              	
  16              	.include "words/pad.s"
   1 1220 00120000 	COLON "pad", PAD
   1      00000000 
   1      03706164 
   1      40080000 
   2 1230 54120000 	    .word XT_HERE, XT_DOLITERAL, 40
   2      860F0000 
   2      28000000 
   3 123c FC0A0000 	    .word XT_PLUS, XT_EXIT
   3      24000000 
  17              	.include "words/here.s"
   1              	
   2 1244 24120000 	COLON "here", HERE
   2      00000000 
   2      04686572 
   2      6500C046 
   2      40080000 
   3 1258 B0320000 	  .word XT_DP, XT_EXIT
   3      24000000 
  18              	.include "words/allot.s"
   1              	
   2 1260 48120000 	COLON "allot", ALLOT
   2      00000000 
   2      05616C6C 
   2      6F74C046 
   2      40080000 
   3 1274 B0320000 	    .word XT_DP
   4 1278 FC0A0000 	    .word XT_PLUS
   5 127c 98310000 	    .word XT_DOTO, XT_DP
   5      B0320000 
   6 1284 24000000 	    .word XT_EXIT
  19              	
  20              	.include "words/hold.s"
   1              	
   2 1288 64120000 	VARIABLE "hld", HLD
   2      01010000 
   2      03686C64 
   2      DA0E0000 
   2      84090000 
   3              	
   4 129c 8C120000 	COLON "hold", HOLD
   4      00000000 
   4      04686F6C 
   4      6400C046 
   4      40080000 
   5 12b0 94120000 	    .word XT_HLD, XT_DUP, XT_FETCH
   5      78000000 
ARM GAS  amforth.asm 			page 41


   5      1C020000 
   6 12bc 440B0000 	    .word XT_1MINUS, XT_DUP, XT_TO_R
   6      78000000 
   6      38010000 
   7 12c8 60000000 	    .word XT_SWAP, XT_STORE, XT_R_FROM
   7      30020000 
   7      50010000 
   8 12d4 D8040000 	    .word XT_CSTORE, XT_EXIT
   8      24000000 
  21              	.include "words/sharp.s"
   1              	
   2 12dc A0120000 	COLON "<#", L_SHARP
   2      00000000 
   2      023C2300 
   2      40080000 
   3              	
   4 12ec 2C120000 	    .word XT_PAD, XT_HLD, XT_STORE
   4      94120000 
   4      30020000 
   5 12f8 24000000 	    .word XT_EXIT
   6              	
   7 12fc E0120000 	COLON "#", SHARP
   7      00000000 
   7      0123C046 
   7      40080000 
   8              	
   9 130c E80A0000 	    .word XT_BASE, XT_FETCH
   9      1C020000 
  10 1314 F8080000 	    .word XT_UDSLASHMOD, XT_ROT
  10      C0000000 
  11 131c 860F0000 	    .word XT_DOLITERAL, 9
  11      09000000 
  12 1324 A8000000 	    .word XT_OVER, XT_LESS
  12      78050000 
  13 132c 720F0000 	    .word XT_DOCONDBRANCH, PFA_SHARP1
  13      40130000 
  14 1334 860F0000 	    .word XT_DOLITERAL, 7, XT_PLUS
  14      07000000 
  14      FC0A0000 
  15              	PFA_SHARP1:
  16 1340 860F0000 	    .word XT_DOLITERAL, 48, XT_PLUS
  16      30000000 
  16      FC0A0000 
  17 134c AC120000 	    .word XT_HOLD, XT_EXIT
  17      24000000 
  18              	
  19 1354 00130000 	COLON "#s", SHARP_S
  19      00000000 
  19      02237300 
  19      40080000 
  20 1364 08130000 	    .word XT_SHARP, XT_2DUP, XT_OR
  20      9C080000 
  20      98030000 
  21 1370 F0040000 	    .word XT_ZEROEQUAL, XT_DOCONDBRANCH, PFA_SHARP_S
  21      720F0000 
  21      64130000 
  22 137c 24000000 	    .word XT_EXIT
ARM GAS  amforth.asm 			page 42


  23              	
  24 1380 58130000 	COLON "#>", SHARP_G
  24      00000000 
  24      02233E00 
  24      40080000 
  25 1390 EC060000 	    .word XT_2DROP, XT_HLD, XT_FETCH
  25      94120000 
  25      1C020000 
  26 139c 2C120000 	    .word XT_PAD, XT_OVER, XT_MINUS
  26      A8000000 
  26      140B0000 
  27 13a8 24000000 	    .word XT_EXIT
  22              	.include "words/sign.s"
   1              	
   2 13ac 84130000 	COLON "sign", SIGN
   2      00000000 
   2      04736967 
   2      6E00C046 
   2      40080000 
   3 13c0 20050000 	    .word XT_ZEROLESS
   4 13c4 720F0000 	    .word XT_DOCONDBRANCH
   5 13c8 D8130000 	    .word PFA_SIGN1
   6 13cc 860F0000 	    .word XT_DOLITERAL
   7 13d0 2D000000 	    .word 45 
   8 13d4 AC120000 	    .word XT_HOLD
   9              	PFA_SIGN1:
  10 13d8 24000000 	    .word XT_EXIT
  23              	.include "words/dot.s"
   1              	
   2 13dc B0130000 	COLON ".", DOT
   2      00000000 
   2      012EC046 
   2      40080000 
   3 13ec CC0A0000 	   .word XT_S2D, XT_DDOT, XT_EXIT
   3      4C140000 
   3      24000000 
  24              	.include "words/d-dot-r.s"
   1              	
   2 13f8 E0130000 	COLON "d.r", DDOTR
   2      00000000 
   2      03642E72 
   2      40080000 
   3 1408 38010000 	.word XT_TO_R, XT_TUCK, XT_DABS, XT_L_SHARP
   3      00010000 
   3      F8070000 
   3      E8120000 
   4 1418 60130000 	.word XT_SHARP_S, XT_ROT, XT_SIGN, XT_SHARP_G
   4      C0000000 
   4      BC130000 
   4      8C130000 
   5 1428 50010000 	.word XT_R_FROM, XT_OVER, XT_MINUS, XT_SPACES
   5      A8000000 
   5      140B0000 
   5      60110000 
   6 1438 50280000 	.word XT_TYPE, XT_EXIT
   6      24000000 
  25              	.include "words/d-dot.s"
ARM GAS  amforth.asm 			page 43


   1              	
   2 1440 FC130000 	COLON "d.", DDOT
   2      00000000 
   2      02642E00 
   2      40080000 
   3 1450 F00F0000 	.word  XT_ZERO, XT_DDOTR, XT_SPACE, XT_EXIT
   3      04140000 
   3      40110000 
   3      24000000 
  26              	.include "words/u-dot.s"
   1 1460 44140000 	COLON "u.", UDOT
   1      00000000 
   1      02752E00 
   1      40080000 
   2 1470 F00F0000 	.word  XT_ZERO, XT_UDDOT, XT_EXIT
   2      88140000 
   2      24000000 
  27              	.include "words/ud-dot.s"
   1              	
   2 147c 64140000 	COLON "ud.", UDDOT
   2      00000000 
   2      0375642E 
   2      40080000 
   3 148c F00F0000 	.word XT_ZERO, XT_UDDOTR, XT_SPACE, XT_EXIT
   3      AC140000 
   3      40110000 
   3      24000000 
  28              	.include "words/ud-dot-r.s"
   1              	
   2 149c 80140000 	COLON "ud.r", UDDOTR
   2      00000000 
   2      0475642E 
   2      7200C046 
   2      40080000 
   3 14b0 38010000 	.word  XT_TO_R, XT_L_SHARP, XT_SHARP_S
   3      E8120000 
   3      60130000 
   4 14bc 8C130000 	.word  XT_SHARP_G, XT_R_FROM,  XT_OVER
   4      50010000 
   4      A8000000 
   5 14c8 140B0000 	.word  XT_MINUS, XT_SPACES, XT_TYPE, XT_EXIT
   5      60110000 
   5      50280000 
   5      24000000 
  29              	
  30              	.include "words/dot-s.s"
   1              	
   2 14d8 A0140000 	COLON ".s", DOTS
   2      00000000 
   2      022E7300 
   2      40080000 
   3              	
   4 14e8 1C030000 	    .word XT_DEPTH
   5 14ec 6C140000 	    .word XT_UDOT
   6 14f0 40110000 	    .word XT_SPACE
   7 14f4 1C030000 	    .word XT_DEPTH
   8 14f8 F00F0000 	    .word XT_ZERO
ARM GAS  amforth.asm 			page 44


   9 14fc C4260000 	    .word XT_QDOCHECK, XT_DOCONDBRANCH,PFA_DOTS2
   9      720F0000 
   9      20150000 
  10 1508 F80D0000 	    .word XT_DODO
  11              	PFA_DOTS1:
  12 150c 680E0000 	    .word XT_I
  13 1510 20010000 	    .word XT_PICK
  14 1514 E8130000 	    .word XT_DOT
  15 1518 160E0000 	    .word XT_DOLOOP,PFA_DOTS1
  15      0C150000 
  16              	PFA_DOTS2:
  17 1520 24000000 	    .word XT_EXIT
  31              	
  32              	.include "words/refill.s"
   1              	
   2 1524 DC140000 	DEFER "refill", REFILL, XT_REFILLTIB
   2      C0000000 
   2      06726566 
   2      696C6C00 
   2      040F0000 
   3              	
   4 1548 28150000 	COLON "refill-tib", REFILLTIB
   4      00000000 
   4      0A726566 
   4      696C6C2D 
   4      74696200 
   5              	
   6 1560 EC0B0000 	    .word XT_TIB
   7 1564 860F0000 	    .word XT_DOLITERAL
   8 1568 60000000 	    .word refill_buf_size
   9 156c 9C150000 	    .word XT_ACCEPT
  10 1570 D80B0000 	    .word XT_NUMBERTIB
  11 1574 30020000 	    .word XT_STORE
  12 1578 F00F0000 	    .word XT_ZERO
  13 157c 9C320000 	    .word XT_TO_IN
  14 1580 30020000 	    .word XT_STORE
  15 1584 58100000 	    .word XT_TRUE 
  16 1588 24000000 	    .word XT_EXIT
  33              	.include "words/accept.s"
   1              	
   2 158c 4C150000 	COLON "accept", ACCEPT
   2      00000000 
   2      06616363 
   2      65707400 
   2      40080000 
   3              	
   4 15a0 A8000000 	        .word XT_OVER,XT_PLUS,XT_OVER
   4      FC0A0000 
   4      A8000000 
   5 15ac D80C0000 	ACC1:   .word XT_KEY,XT_DUP,XT_CRLFQ,XT_ZEROEQUAL,XT_DOCONDBRANCH
   5      78000000 
   5      DC160000 
   5      F0040000 
   5      720F0000 
   6 15c0 8C160000 	        .word ACC5
   7 15c4 78000000 	        .word XT_DUP,XT_DOLITERAL,8,XT_EQUAL,XT_DOCONDBRANCH
   7      860F0000 
ARM GAS  amforth.asm 			page 45


   7      08000000 
   7      04060000 
   7      720F0000 
   8 15d8 24160000 	        .word ACC3
   9 15dc 48000000 	        .word XT_DROP,XT_ROT,XT_2DUP,XT_GREATER,XT_TO_R,XT_ROT,XT_ROT,XT_R_FROM,XT_DOCONDBRANCH
   9      C0000000 
   9      9C080000 
   9      98050000 
   9      38010000 
  10 1600 1C160000 		.word ACC6
  11 1604 AC160000 		.word XT_BS,XT_1MINUS,XT_TO_R,XT_OVER,XT_R_FROM,XT_UMAX
  11      440B0000 
  11      38010000 
  11      A8000000 
  11      50010000 
  12 161c 680F0000 	ACC6:   .word XT_DOBRANCH
  13 1620 84160000 	        .word ACC4
  14              	ACC3:    
  15 1624 78000000 		.word XT_DUP,XT_BL,XT_LESS,XT_DOCONDBRANCH
  15      28110000 
  15      78050000 
  15      720F0000 
  16 1634 40160000 	        .word PFA_ACCEPT6
  17 1638 48000000 	          .word XT_DROP
  18 163c 28110000 	          .word XT_BL
  19              	PFA_ACCEPT6:
  20 1640 38010000 		.word XT_TO_R,XT_2DUP,XT_GREATER,XT_R_FROM,XT_SWAP,XT_DOCONDBRANCH
  20      9C080000 
  20      98050000 
  20      50010000 
  20      60000000 
  21 1658 80160000 	        .word ACC7
  22 165c 78000000 	            .word XT_DUP,XT_EMIT,XT_OVER,XT_CSTORE,XT_1PLUS,XT_OVER,XT_UMIN
  22      3C0D0000 
  22      A8000000 
  22      D8040000 
  22      2C0B0000 
  23 1678 680F0000 		    .word XT_DOBRANCH
  24 167c 84160000 		    .word ACC4 
  25 1680 48000000 	ACC7:   .word XT_DROP
  26 1684 680F0000 	ACC4:   .word XT_DOBRANCH
  27 1688 AC150000 	        .word ACC1
  28 168c 48000000 	ACC5:   .word XT_DROP,XT_NIP,XT_SWAP,XT_MINUS,XT_EXIT
  28      90000000 
  28      60000000 
  28      140B0000 
  28      24000000 
  29              	
  30              	
  31 16a0 90150000 	COLON "bs", BS
  31      00000000 
  31      02627300 
  31      40080000 
  32 16b0 860F0000 	    .word XT_DOLITERAL
  33 16b4 08000000 	    .word 8
  34 16b8 78000000 	    .word XT_DUP
  35 16bc 3C0D0000 	    .word XT_EMIT
ARM GAS  amforth.asm 			page 46


  36 16c0 40110000 	    .word XT_SPACE
  37 16c4 3C0D0000 	    .word XT_EMIT
  38 16c8 24000000 	    .word XT_EXIT
  39              	
  40 16cc A4160000 	COLON "?crlf", CRLFQ
  40      00000000 
  40      053F6372 
  40      6C66C046 
  40      40080000 
  41              	
  42 16e0 78000000 	    .word XT_DUP
  43 16e4 860F0000 	    .word XT_DOLITERAL
  44 16e8 0D000000 	    .word 13
  45 16ec 04060000 	    .word XT_EQUAL
  46 16f0 60000000 	    .word XT_SWAP
  47 16f4 860F0000 	    .word XT_DOLITERAL
  48 16f8 0A000000 	    .word 10
  49 16fc 04060000 	    .word XT_EQUAL
  50 1700 98030000 	    .word XT_OR
  51 1704 24000000 	    .word XT_EXIT
  34              	.include "words/prompt-error.s"
   1              	
   2 1708 D0160000 	DEFER ".error", PROMPTERROR, XT_PROMPTERROR_DEFAULT
   2      C0000000 
   2      062E6572 
   2      726F7200 
   2      040F0000 
   3              	
   4 172c 40080000 	NONAME PROMPTERROR_DEFAULT
   5 1730 B60E0000 	    STRING " ?? "
   5      04203F3F 
   5      2000C046 
   6 173c 50280000 	    .word XT_TYPE
   7 1740 E80A0000 	    .word XT_BASE
   8 1744 1C020000 	    .word XT_FETCH
   9 1748 38010000 	    .word XT_TO_R
  10 174c E4110000 	    .word XT_DECIMAL
  11 1750 E8130000 	    .word XT_DOT
  12 1754 9C320000 	    .word XT_TO_IN
  13 1758 1C020000 	    .word XT_FETCH
  14 175c E8130000 	    .word XT_DOT
  15 1760 50010000 	    .word XT_R_FROM
  16 1764 E80A0000 	    .word XT_BASE
  17 1768 30020000 	    .word XT_STORE
  18 176c 24000000 	    .word XT_EXIT
  35              	.include "words/prompt-input.s"
   1              	
   2 1770 0C170000 	DEFER ".input", PROMPTINPUT, XT_PROMPTINPUT_DEFAULT
   2      C0000000 
   2      062E696E 
   2      70757400 
   2      040F0000 
   3              	
   4 1794 40080000 	NONAME PROMPTINPUT_DEFAULT
   5 1798 FC100000 	    .word XT_CR
   6 179c 24000000 	    .word XT_EXIT
  36              	.include "words/prompt-ok.s"
ARM GAS  amforth.asm 			page 47


   1              	
   2 17a0 74170000 	DEFER ".ok", PROMPTOK, XT_PROMPTOKDEFAULT
   2      C0000000 
   2      032E6F6B 
   2      040F0000 
   2      94090000 
   3              	
   4 17c0 40080000 	NONAME PROMPTOKDEFAULT
   5 17c4 C00B0000 	    .word XT_STATE,XT_FETCH,XT_DROP
   5      1C020000 
   5      48000000 
   6 17d0 B60E0000 	    STRING " ok"
   6      03206F6B 
   7 17d8 50280000 	    .word XT_TYPE
   8 17dc 24000000 	    .word XT_EXIT
  37              	.include "words/prompt-ready.s"
   1              	
   2 17e0 A4170000 	DEFER ".ready", PROMPTREADY, XT_PROMPTREADYDEFAULT
   2      C0000000 
   2      062E7265 
   2      61647900 
   2      040F0000 
   3              	
   4 1804 40080000 	NONAME PROMPTREADYDEFAULT
   5              	
   6 1808 FC100000 	    .word XT_CR
   7 180c B60E0000 	    STRING "> "
   7      023E2000 
   8 1814 50280000 	    .word XT_TYPE
   9 1818 24000000 	    .word XT_EXIT
  38              	
  39              	.include "words/catch.s"
   1              	
   2 181c E4170000 	USER "handler", HANDLER, USER_HANDLER
   2      01010000 
   2      0768616E 
   2      646C6572 
   2      120F0000 
   3              	
   4 1834 20180000 	COLON "catch", CATCH
   4      00000000 
   4      05636174 
   4      6368C046 
   4      40080000 
   5              	
   6 1848 C4010000 	    .word XT_SP_FETCH
   7 184c 38010000 	    .word XT_TO_R
   8 1850 2C180000 	    .word XT_HANDLER
   9 1854 1C020000 	    .word XT_FETCH
  10 1858 38010000 	    .word XT_TO_R
  11 185c 80010000 	    .word XT_RP_FETCH
  12 1860 2C180000 	    .word XT_HANDLER
  13 1864 30020000 	    .word XT_STORE
  14 1868 C00C0000 	    .word XT_EXECUTE
  15 186c 50010000 	    .word XT_R_FROM
  16 1870 2C180000 	    .word XT_HANDLER
  17 1874 30020000 	    .word XT_STORE
ARM GAS  amforth.asm 			page 48


  18 1878 50010000 	    .word XT_R_FROM
  19 187c 48000000 	    .word XT_DROP
  20 1880 F00F0000 	    .word XT_ZERO
  21 1884 24000000 	    .word XT_EXIT
  40              	.include "words/throw.s"
   1 1888 38180000 	COLON "throw", THROW
   1      00000000 
   1      05746872 
   1      6F77C046 
   1      40080000 
   2              	
   3 189c E0000000 	    .word XT_QDUP
   4 18a0 720F0000 	    .word XT_DOCONDBRANCH,PFA_THROW1
   4      D8180000 
   5 18a8 2C180000 	      .word XT_HANDLER
   6 18ac 1C020000 	      .word XT_FETCH
   7 18b0 98010000 	      .word XT_RP_STORE
   8 18b4 50010000 	      .word XT_R_FROM
   9 18b8 2C180000 	      .word XT_HANDLER
  10 18bc 30020000 	      .word XT_STORE
  11 18c0 50010000 	      .word XT_R_FROM
  12 18c4 60000000 	      .word XT_SWAP
  13 18c8 38010000 	      .word XT_TO_R
  14 18cc DC010000 	      .word XT_SP_STORE
  15 18d0 48000000 	      .word XT_DROP
  16 18d4 50010000 	      .word XT_R_FROM    
  17              	PFA_THROW1:
  18 18d8 24000000 	    .word XT_EXIT
  19              	
  41              	.include "words/source.s"
   1              	
   2 18dc 8C180000 	DEFER "source", SOURCE, XT_SOURCETIB
   2      C0000000 
   2      06736F75 
   2      72636500 
   2      040F0000 
   3              	
   4 1900 E0180000 	COLON "source-tib", SOURCETIB
   4      00000000 
   4      0A736F75 
   4      7263652D 
   4      74696200 
   5              	
   6 1918 EC0B0000 	    .word XT_TIB
   7 191c D80B0000 	    .word XT_NUMBERTIB
   8 1920 1C020000 	    .word XT_FETCH
   9 1924 24000000 	    .word XT_EXIT
  42              	.include "words/q-stack.s"
   1 1928 04190000 	COLON "?stack", QSTACK
   1      00000000 
   1      063F7374 
   1      61636B00 
   1      40080000 
   2              	
   3 193c 1C030000 	    .word XT_DEPTH
   4 1940 20050000 	    .word XT_ZEROLESS
   5 1944 720F0000 	    .word XT_DOCONDBRANCH,PFA_QSTACK1
ARM GAS  amforth.asm 			page 49


   5      58190000 
   6 194c 860F0000 	      .word XT_DOLITERAL
   7 1950 FCFFFFFF 	      .word -4
   8 1954 98180000 	      .word XT_THROW
   9              	PFA_QSTACK1:
  10 1958 24000000 	    .word XT_EXIT
  43              	.include "words/cscan.s"
   1              	
   2 195c 2C190000 	COLON "cscan", CSCAN
   2      00000000 
   2      05637363 
   2      616EC046 
   2      40080000 
   3 1970 38010000 	    .word XT_TO_R
   4 1974 A8000000 	    .word XT_OVER
   5              	PFA_CSCAN1:
   6 1978 78000000 	    .word XT_DUP
   7 197c C4040000 	    .word XT_CFETCH
   8 1980 68010000 	    .word XT_R_FETCH
   9 1984 04060000 	    .word XT_EQUAL
  10 1988 F0040000 	    .word XT_ZEROEQUAL
  11 198c 720F0000 	    .word XT_DOCONDBRANCH,PFA_CSCAN2
  11      C0190000 
  12 1994 60000000 	      .word XT_SWAP
  13 1998 440B0000 	      .word XT_1MINUS
  14 199c 60000000 	      .word XT_SWAP
  15 19a0 A8000000 	      .word XT_OVER
  16 19a4 20050000 	      .word XT_ZEROLESS 
  17 19a8 F0040000 	      .word XT_ZEROEQUAL
  18 19ac 720F0000 	      .word XT_DOCONDBRANCH, PFA_CSCAN2
  18      C0190000 
  19 19b4 2C0B0000 	        .word XT_1PLUS
  20 19b8 680F0000 	        .word XT_DOBRANCH, PFA_CSCAN1
  20      78190000 
  21              	PFA_CSCAN2:
  22 19c0 90000000 	    .word XT_NIP
  23 19c4 A8000000 	    .word XT_OVER
  24 19c8 140B0000 	    .word XT_MINUS
  25 19cc 50010000 	    .word XT_R_FROM
  26 19d0 48000000 	    .word XT_DROP
  27 19d4 24000000 	    .word XT_EXIT
  44              	.include "words/cskip.s"
   1              	
   2 19d8 60190000 	COLON "cskip", CSKIP
   2      00000000 
   2      0563736B 
   2      6970C046 
   2      40080000 
   3              	
   4 19ec 38010000 	    .word XT_TO_R
   5              	PFA_CSKIP1:
   6 19f0 78000000 	    .word XT_DUP      
   7 19f4 720F0000 	    .word XT_DOCONDBRANCH, PFA_CSKIP2
   7      281A0000 
   8 19fc A8000000 	    .word XT_OVER         
   9 1a00 C4040000 	    .word XT_CFETCH       
  10 1a04 68010000 	    .word XT_R_FETCH      
ARM GAS  amforth.asm 			page 50


  11 1a08 04060000 	    .word XT_EQUAL        
  12 1a0c 720F0000 	    .word XT_DOCONDBRANCH, PFA_CSKIP2
  12      281A0000 
  13 1a14 860F0000 	    .word XT_DOLITERAL,1
  13      01000000 
  14 1a1c 001B0000 	    .word XT_SLASHSTRING
  15 1a20 680F0000 	    .word XT_DOBRANCH, PFA_CSKIP1
  15      F0190000 
  16              	PFA_CSKIP2:
  17 1a28 50010000 	    .word XT_R_FROM
  18 1a2c 48000000 	    .word XT_DROP          
  19 1a30 24000000 	    .word XT_EXIT
  45              	.include "words/parse-name.s"
   1              	
   2 1a34 DC190000 	COLON "parse-name", PARSENAME
   2      00000000 
   2      0A706172 
   2      73652D6E 
   2      616D6500 
   3 1a4c 28110000 	    .word XT_BL
   4 1a50 581A0000 	    .word XT_SKIPSCANCHAR
   5 1a54 24000000 	    .word XT_EXIT 
   6              	
   7 1a58 40080000 	NONAME SKIPSCANCHAR
   8 1a5c 38010000 	    .word XT_TO_R
   9 1a60 EC180000 	    .word XT_SOURCE 
  10 1a64 9C320000 	    .word XT_TO_IN 
  11 1a68 1C020000 	    .word XT_FETCH 
  12 1a6c 001B0000 	    .word XT_SLASHSTRING 
  13              	
  14 1a70 68010000 	    .word XT_R_FETCH
  15 1a74 E8190000 	    .word XT_CSKIP
  16 1a78 50010000 	    .word XT_R_FROM
  17 1a7c 6C190000 	    .word XT_CSCAN
  18              	
  19 1a80 9C080000 	    .word XT_2DUP
  20 1a84 FC0A0000 	    .word XT_PLUS
  21 1a88 EC180000 	    .word XT_SOURCE 
  22 1a8c 48000000 	    .word XT_DROP
  23 1a90 140B0000 	    .word XT_MINUS
  24 1a94 9C320000 	    .word XT_TO_IN
  25 1a98 30020000 	    .word XT_STORE
  26 1a9c 24000000 	    .word XT_EXIT
  46              	.include "words/parse.s"
   1              	
   2 1aa0 381A0000 	COLON "parse", PARSE
   2      00000000 
   2      05706172 
   2      7365C046 
   2      40080000 
   3 1ab4 38010000 	    .word XT_TO_R 
   4 1ab8 EC180000 	    .word XT_SOURCE
   5 1abc 9C320000 	    .word XT_TO_IN 
   6 1ac0 1C020000 	    .word XT_FETCH
   7 1ac4 001B0000 	    .word XT_SLASHSTRING 
   8              	
   9 1ac8 50010000 	    .word XT_R_FROM
ARM GAS  amforth.asm 			page 51


  10 1acc 6C190000 	    .word XT_CSCAN 
  11 1ad0 78000000 	    .word XT_DUP   
  12 1ad4 2C0B0000 	    .word XT_1PLUS
  13 1ad8 9C320000 	    .word XT_TO_IN 
  14 1adc A8040000 	    .word XT_PLUSSTORE
  15 1ae0 860F0000 	    .word XT_DOLITERAL,1
  15      01000000 
  16 1ae8 001B0000 	    .word XT_SLASHSTRING
  17 1aec 24000000 	    .word XT_EXIT
  47              	.include "words/slash-string.s"
   1              	
   2 1af0 A41A0000 	COLON "/string", SLASHSTRING
   2      00000000 
   2      072F7374 
   2      72696E67 
   2      40080000 
   3              	
   4 1b04 C0000000 	    .word XT_ROT
   5 1b08 A8000000 	    .word XT_OVER
   6 1b0c FC0A0000 	    .word XT_PLUS
   7 1b10 C0000000 	    .word XT_ROT
   8 1b14 C0000000 	    .word XT_ROT
   9 1b18 140B0000 	    .word XT_MINUS
  10 1b1c 24000000 	    .word XT_EXIT
  11              	
  48              	
  49              	.include "words/2literal.s"
   1              	
   2 1b20 F41A0000 	IMMED "2literal", 2LITERAL
   2      10000000 
   2      08326C69 
   2      74657261 
   2      6C00C046 
   3 1b38 60000000 	    .word XT_SWAP
   4 1b3c 581B0000 	    .word XT_LITERAL
   5 1b40 581B0000 	    .word XT_LITERAL
   6 1b44 24000000 	    .word XT_EXIT
  50              	.include "words/literal.s"
   1              	
   2 1b48 241B0000 	IMMED "literal", LITERAL
   2      10000000 
   2      076C6974 
   2      6572616C 
   2      40080000 
   3 1b5c 7C1B0000 	        .word XT_COMPILE
   4 1b60 860F0000 	        .word XT_DOLITERAL
   5 1b64 A81B0000 	        .word XT_COMMA
   6 1b68 24000000 	        .word XT_EXIT
  51              	.include "words/compile.s"
   1              	
   2 1b6c 4C1B0000 	COLON "compile", COMPILE
   2      00000000 
   2      07636F6D 
   2      70696C65 
   2      40080000 
   3 1b80 50010000 	    .word XT_R_FROM
   4 1b84 78000000 	    .word XT_DUP
ARM GAS  amforth.asm 			page 52


   5 1b88 900B0000 	    .word XT_CELLPLUS
   6 1b8c 38010000 	    .word XT_TO_R
   7 1b90 1C020000 	    .word XT_FETCH
   8 1b94 A81B0000 	    .word XT_COMMA
   9 1b98 24000000 	    .word XT_EXIT
  52              	.include "words/comma.s"
   1              	
   2 1b9c 701B0000 	COLON ",", COMMA
   2      00000000 
   2      012CC046 
   2      40080000 
   3              	
   4 1bac 54120000 	    .word XT_HERE
   5 1bb0 30020000 	    .word XT_STORE
   6 1bb4 860F0000 	    .word XT_DOLITERAL,4
   6      04000000 
   7 1bbc 70120000 	    .word XT_ALLOT
   8 1bc0 24000000 	    .word XT_EXIT
   9              	
  10 1bc4 A01B0000 	COLON "c,", CCOMMA
  10      00000000 
  10      02632C00 
  10      40080000 
  11 1bd4 54120000 	   .word XT_HERE
  12 1bd8 D8040000 	   .word XT_CSTORE
  13 1bdc 04100000 	   .word XT_ONE, XT_ALLOT
  13      70120000 
  14 1be4 24000000 	   .word XT_EXIT
  53              	.include "words/immediate-q.s"
   1              	
   2 1be8 40080000 	NONAME IMMEDIATEQ
   3 1bec 1C020000 	    .word XT_FETCH
   4 1bf0 860F0000 	    .word  XT_DOLITERAL
   5 1bf4 10000000 	    .word  Flag_immediate
   6 1bf8 00010000 	    .word  XT_TUCK
   7 1bfc 80030000 	    .word  XT_AND
   8 1c00 04060000 	    .word  XT_EQUAL
   9 1c04 720F0000 	    .word  XT_DOCONDBRANCH,IMMEDIATEQ1
   9      141C0000 
  10 1c0c 04100000 	     .word  XT_ONE
  11 1c10 24000000 	     .word  XT_EXIT
  12              	IMMEDIATEQ1:
  13 1c14 40100000 	    .word  XT_MINUSONE
  14 1c18 24000000 	    .word  XT_EXIT
  54              	.include "words/order.s"
   1              	
   2 1c1c C81B0000 	DATA "cfg-order", CFG_ORDER
   2      00000000 
   2      09636667 
   2      2D6F7264 
   2      6572C046 
   3 1c34 03000000 	.word 3
   4 1c38 60330000 	.word XT_RAM_WORDLIST
   5 1c3c 903A0000 	.word XT_FORTH_WORDLIST
   6 1c40 643A0000 	.word XT_ENVIRONMENT
  55              	.include "words/find-xt.s"
   1              	
ARM GAS  amforth.asm 			page 53


   2 1c44 201C0000 	COLON "find-xt", FINDXT
   2      00000000 
   2      0766696E 
   2      642D7874 
   2      40080000 
   3              	
   4 1c58 860F0000 	    .word XT_DOLITERAL
   5 1c5c 801C0000 	    .word XT_FINDXTA
   6 1c60 301C0000 	    .word XT_CFG_ORDER
   7 1c64 18260000 	    .word XT_MAPSTACK
   8 1c68 F0040000 	    .word XT_ZEROEQUAL
   9 1c6c 720F0000 	    .word XT_DOCONDBRANCH,PFA_FINDXT1
   9      7C1C0000 
  10 1c74 EC060000 	      .word XT_2DROP
  11 1c78 F00F0000 	      .word XT_ZERO
  12              	PFA_FINDXT1:
  13 1c7c 24000000 	    .word XT_EXIT
  14              	
  15 1c80 40080000 	NONAME FINDXTA
  16 1c84 38010000 	    .word XT_TO_R
  17 1c88 9C080000 	    .word XT_2DUP
  18 1c8c 50010000 	    .word XT_R_FROM, XT_EXECUTE
  18      C00C0000 
  19 1c94 F01D0000 	    .word XT_SEARCH_WORDLIST
  20 1c98 78000000 	    .word XT_DUP
  21 1c9c 720F0000 	    .word XT_DOCONDBRANCH,PFA_FINDXTA1
  21      B81C0000 
  22 1ca4 38010000 	      .word XT_TO_R
  23 1ca8 90000000 	      .word XT_NIP
  24 1cac 90000000 	      .word XT_NIP
  25 1cb0 50010000 	      .word XT_R_FROM
  26 1cb4 58100000 	      .word XT_TRUE
  27              	PFA_FINDXTA1:
  28 1cb8 24000000 	    .word XT_EXIT
  29              	
  56              	.include "words/nfa2lfa.s"
   1              	
   2 1cbc 481C0000 	COLON "nfa>lfa", NFA2LFA
   2      00000000 
   2      076E6661 
   2      3E6C6661 
   2      40080000 
   3 1cd0 860F0000 	    .word XT_DOLITERAL,4
   3      04000000 
   4 1cd8 140B0000 	    .word XT_MINUS
   5 1cdc 24000000 	    .word XT_EXIT
  57              	.include "words/nfa2cfa.s"
   1              	
   2 1ce0 C01C0000 	COLON "nfa2cfa", NFA2CFA
   2      00000000 
   2      076E6661 
   2      32636661 
   2      40080000 
   3 1cf4 900B0000 	    .word XT_CELLPLUS,XT_COUNT,XT_PLUS,XT_ALIGNED
   3      28280000 
   3      FC0A0000 
   3      A80E0000 
ARM GAS  amforth.asm 			page 54


   4 1d04 24000000 	.word XT_EXIT
  58              	.include "words/traverse-wordlist.s"
   1              	
   2 1d08 E41C0000 	COLON "traverse-wordlist",TRAVERSEWORDLIST
   2      00000000 
   2      11747261 
   2      76657273 
   2      652D776F 
   3              	
   4              	PFA_TRAVERSEWORDLIST1:
   5 1d28 78000000 	    .word XT_DUP
   6 1d2c 720F0000 	    .word XT_DOCONDBRANCH,PFA_TRAVERSEWORDLIST2
   6      641D0000 
   7 1d34 9C080000 	    .word XT_2DUP
   8 1d38 4C070000 	    .word XT_2TO_R
   9 1d3c 60000000 	    .word XT_SWAP
  10 1d40 C00C0000 	    .word XT_EXECUTE
  11 1d44 68070000 	    .word XT_2R_FROM
  12 1d48 C0000000 	    .word XT_ROT
  13 1d4c 720F0000 	    .word XT_DOCONDBRANCH,PFA_TRAVERSEWORDLIST2
  13      641D0000 
  14 1d54 CC1C0000 	    .word XT_NFA2LFA
  15 1d58 1C020000 	    .word XT_FETCH
  16 1d5c 680F0000 	    .word XT_DOBRANCH,PFA_TRAVERSEWORDLIST1
  16      281D0000 
  17              	PFA_TRAVERSEWORDLIST2:
  18 1d64 EC060000 	    .word XT_2DROP
  19 1d68 24000000 	    .word XT_EXIT
  59              	.include "words/show-wordlist.s"
   1              	
   2 1d6c 0C1D0000 	COLON "show-wordlist", SHOWWORDLIST
   2      00000000 
   2      0D73686F 
   2      772D776F 
   2      72646C69 
   3 1d88 860F0000 	    .word XT_DOLITERAL
   4 1d8c 9C1D0000 	    .word XT_SHOWWORD
   5 1d90 60000000 	    .word XT_SWAP
   6 1d94 241D0000 	    .word XT_TRAVERSEWORDLIST
   7 1d98 24000000 	    .word XT_EXIT
   8              	
   9 1d9c 40080000 	NONAME SHOWWORD
  10 1da0 A01E0000 	    .word XT_NAME2STRING
  11 1da4 50280000 	    .word XT_TYPE
  12 1da8 40110000 	    .word XT_SPACE
  13 1dac 58100000 	    .word XT_TRUE
  14 1db0 24000000 	    .word XT_EXIT
  60              	.include "words/current.s"
   1              	
   2 1db4 701D0000 	VALUE "current", CURRENT, XT_RAM_WORDLIST
   2      A0000000 
   2      07637572 
   2      72656E74 
   2      F40E0000 
  61              	.include "words/search-wordlist.s"
   1              	
   2 1dd8 B81D0000 	COLON "search-wordlist",SEARCH_WORDLIST
ARM GAS  amforth.asm 			page 55


   2      00000000 
   2      0F736561 
   2      7263682D 
   2      776F7264 
   3              	
   4 1df4 38010000 	    .word XT_TO_R
   5 1df8 F00F0000 	    .word XT_ZERO
   6 1dfc 860F0000 	    .word XT_DOLITERAL
   7 1e00 441E0000 	    .word XT_ISWORD
   8 1e04 50010000 	    .word XT_R_FROM
   9 1e08 241D0000 	    .word XT_TRAVERSEWORDLIST
  10 1e0c 78000000 	    .word XT_DUP
  11 1e10 F0040000 	    .word XT_ZEROEQUAL
  12 1e14 720F0000 	    .word XT_DOCONDBRANCH,PFA_SEARCH_WORDLIST1
  12      2C1E0000 
  13 1e1c EC060000 	       .word XT_2DROP
  14 1e20 48000000 	       .word XT_DROP
  15 1e24 F00F0000 	       .word XT_ZERO
  16 1e28 24000000 	       .word XT_EXIT
  17              	PFA_SEARCH_WORDLIST1:
  18 1e2c 78000000 	      .word XT_DUP
  19 1e30 F01C0000 	      .word XT_NFA2CFA
  20 1e34 60000000 	      .word XT_SWAP
  21 1e38 D01E0000 	      .word XT_NAME2FLAGS
  22 1e3c E81B0000 	      .word XT_IMMEDIATEQ
  23 1e40 24000000 	    .word XT_EXIT
  24              	
  25 1e44 40080000 	NONAME ISWORD
  26 1e48 38010000 	    .word XT_TO_R
  27 1e4c 48000000 	    .word XT_DROP
  28 1e50 9C080000 	    .word XT_2DUP
  29 1e54 68010000 	    .word XT_R_FETCH
  30 1e58 A01E0000 	    .word XT_NAME2STRING
  31 1e5c A80F0000 	    .word XT_COMPARE
  32 1e60 720F0000 	    .word XT_DOCONDBRANCH,PFA_ISWORD3
  32      7C1E0000 
  33 1e68 50010000 	      .word XT_R_FROM
  34 1e6c 48000000 	      .word XT_DROP
  35 1e70 F00F0000 	      .word XT_ZERO
  36 1e74 58100000 	      .word XT_TRUE
  37 1e78 24000000 	      .word XT_EXIT
  38              	PFA_ISWORD3:
  39 1e7c EC060000 	      .word XT_2DROP
  40 1e80 50010000 	      .word XT_R_FROM
  41 1e84 F00F0000 	      .word XT_ZERO
  42 1e88 24000000 	      .word XT_EXIT
  62              	.include "words/name2string.s"
   1              	
   2 1e8c DC1D0000 	COLON "name>string",NAME2STRING
   2      00000000 
   2      0B6E616D 
   2      653E7374 
   2      72696E67 
   3 1ea4 900B0000 	    .word XT_CELLPLUS
   4 1ea8 28280000 	    .word XT_COUNT
   5 1eac 860F0000 	    .word XT_DOLITERAL
   6 1eb0 FF000000 	    .word 255
ARM GAS  amforth.asm 			page 56


   7 1eb4 80030000 	    .word XT_AND
   8 1eb8 24000000 	    .word XT_EXIT
  63              	.include "words/name2flags.s"
   1 1ebc 901E0000 	COLON "name>flags", NAME2FLAGS
   1      00000000 
   1      0A6E616D 
   1      653E666C 
   1      61677300 
   2 1ed4 24000000 	.word XT_EXIT
  64              	
  65              	.include "words/mplus.s"
   1              	
   2 1ed8 C01E0000 	COLON "m+", MPLUS
   2      00000000 
   2      026D2B00 
   2      40080000 
   3 1ee8 CC0A0000 	    .word XT_S2D
   4 1eec 5C080000 	    .word XT_DPLUS
   5 1ef0 24000000 	    .word XT_EXIT
  66              	.include "words/ud-star.s"
   1              	
   2 1ef4 DC1E0000 	COLON "ud*", UDSTAR
   2      00000000 
   2      0375642A 
   2      40080000 
   3              	
   4 1f04 78000000 	    .word XT_DUP,XT_TO_R,XT_UMSTAR,XT_DROP
   4      38010000 
   4      BC080000 
   4      48000000 
   5 1f14 60000000 	    .word XT_SWAP,XT_R_FROM,XT_UMSTAR,XT_ROT,XT_PLUS,XT_EXIT
   5      50010000 
   5      BC080000 
   5      C0000000 
   5      FC0A0000 
  67              	.include "words/within.s"
   1              	
   2 1f2c F81E0000 	COLON "within", WITHIN
   2      00000000 
   2      06776974 
   2      68696E00 
   2      40080000 
   3              	
   4 1f40 A8000000 	    .word XT_OVER
   5 1f44 140B0000 	    .word XT_MINUS
   6 1f48 38010000 	    .word XT_TO_R
   7 1f4c 140B0000 	    .word XT_MINUS
   8 1f50 50010000 	    .word XT_R_FROM
   9 1f54 B8050000 	    .word XT_ULESS
  10 1f58 24000000 	    .word XT_EXIT
  68              	.include "words/to-upper.s"
   1              	
   2 1f5c 301F0000 	COLON "toupper", TOUPPER
   2      00000000 
   2      07746F75 
   2      70706572 
   2      40080000 
ARM GAS  amforth.asm 			page 57


   3 1f70 78000000 	    .word XT_DUP 
   4 1f74 860F0000 	    .word XT_DOLITERAL 
   5 1f78 61000000 	    .word 'a' 
   6 1f7c 860F0000 	    .word XT_DOLITERAL 
   7 1f80 7B000000 	    .word 'z'+1
   8 1f84 3C1F0000 	    .word XT_WITHIN 
   9 1f88 720F0000 	    .word XT_DOCONDBRANCH,PFA_TOUPPER0
   9      9C1F0000 
  10 1f90 860F0000 	    .word XT_DOLITERAL
  11 1f94 DF000000 	    .word 223 
  12 1f98 80030000 	    .word XT_AND 
  13              	PFA_TOUPPER0:
  14 1f9c 24000000 	    .word XT_EXIT 
  69              	.include "words/digit-q.s"
   1              	
   2 1fa0 601F0000 	COLON "digit?", DIGITQ
   2      00000000 
   2      06646967 
   2      69743F00 
   2      40080000 
   3 1fb4 6C1F0000 	    .word XT_TOUPPER
   4 1fb8 78000000 	    .word XT_DUP,XT_DOLITERAL,57,XT_GREATER,XT_DOLITERAL,256
   4      860F0000 
   4      39000000 
   4      98050000 
   4      860F0000 
   5 1fd0 80030000 	    .word XT_AND,XT_PLUS,XT_DUP,XT_DOLITERAL,320,XT_GREATER
   5      FC0A0000 
   5      78000000 
   5      860F0000 
   5      40010000 
   6 1fe8 860F0000 	    .word XT_DOLITERAL,263,XT_AND,XT_MINUS,XT_DOLITERAL,48
   6      07010000 
   6      80030000 
   6      140B0000 
   6      860F0000 
   7 2000 140B0000 	    .word XT_MINUS,XT_DUP,XT_BASE,XT_FETCH,XT_ULESS
   7      78000000 
   7      E80A0000 
   7      1C020000 
   7      B8050000 
   8 2014 24000000 	    .word XT_EXIT
  70              	.include "words/to-number.s"
   1              	
   2 2018 A41F0000 	COLON ">number", TO_NUMBER
   2      00000000 
   2      073E6E75 
   2      6D626572 
   2      40080000 
   3              	
   4              	
   5 202c 78000000 	TONUM1: .word XT_DUP,XT_DOCONDBRANCH,TONUM3
   5      720F0000 
   5      8C200000 
   6 2038 A8000000 	        .word XT_OVER,XT_CFETCH,XT_DIGITQ
   6      C4040000 
   6      B01F0000 
ARM GAS  amforth.asm 			page 58


   7 2044 F0040000 	        .word XT_ZEROEQUAL,XT_DOCONDBRANCH,TONUM2
   7      720F0000 
   7      58200000 
   8 2050 48000000 	        .word XT_DROP,XT_EXIT
   8      24000000 
   9 2058 38010000 	TONUM2: .word XT_TO_R,XT_2SWAP,XT_BASE,XT_FETCH,XT_UDSTAR
   9      9C060000 
   9      E80A0000 
   9      1C020000 
   9      001F0000 
  10 206c 50010000 	        .word XT_R_FROM,XT_MPLUS,XT_2SWAP
  10      E41E0000 
  10      9C060000 
  11 2078 860F0000 	        .word XT_DOLITERAL,1,XT_SLASHSTRING,XT_DOBRANCH,TONUM1
  11      01000000 
  11      001B0000 
  11      680F0000 
  11      2C200000 
  12 208c 24000000 	TONUM3: .word XT_EXIT
  71              	.include "words/number.s"
   1 2090 1C200000 	COLON "number", NUMBER
   1      00000000 
   1      066E756D 
   1      62657200 
   1      40080000 
   2              	
   3 20a4 E80A0000 	    .word XT_BASE
   4 20a8 1C020000 	    .word XT_FETCH
   5 20ac 38010000 	    .word XT_TO_R
   6 20b0 BC210000 	    .word XT_QSIGN
   7 20b4 38010000 	    .word XT_TO_R
   8 20b8 30220000 	    .word XT_SET_BASE
   9 20bc BC210000 	    .word XT_QSIGN
  10 20c0 50010000 	    .word XT_R_FROM
  11 20c4 98030000 	    .word XT_OR
  12 20c8 38010000 	    .word XT_TO_R
  13              	
  14 20cc 78000000 	    .word XT_DUP
  15 20d0 F0040000 	    .word XT_ZEROEQUAL
  16 20d4 720F0000 	    .word XT_DOCONDBRANCH,PFA_NUMBER0
  16      FC200000 
  17 20dc EC060000 	      .word XT_2DROP
  18 20e0 50010000 	      .word XT_R_FROM
  19 20e4 48000000 	      .word XT_DROP
  20 20e8 50010000 	      .word XT_R_FROM
  21 20ec E80A0000 	      .word XT_BASE
  22 20f0 30020000 	      .word XT_STORE
  23 20f4 F00F0000 	      .word XT_ZERO
  24 20f8 24000000 	      .word XT_EXIT
  25              	PFA_NUMBER0:
  26 20fc 4C070000 	    .word XT_2TO_R
  27 2100 F00F0000 	    .word XT_ZERO       
  28 2104 F00F0000 	    .word XT_ZERO
  29 2108 68070000 	    .word XT_2R_FROM
  30 210c 28200000 	    .word XT_TO_NUMBER 
  31 2110 E0000000 	    .word XT_QDUP
  32 2114 720F0000 	    .word XT_DOCONDBRANCH, PFA_NUMBER1
ARM GAS  amforth.asm 			page 59


  32      8C210000 
  33 211c 860F0000 	      .word XT_DOLITERAL,1
  33      01000000 
  34 2124 04060000 	      .word XT_EQUAL
  35 2128 720F0000 	      .word XT_DOCONDBRANCH,PFA_NUMBER2
  35      68210000 
  36 2130 C4040000 		.word XT_CFETCH
  37 2134 860F0000 		.word XT_DOLITERAL, 0x2e 
  37      2E000000 
  38 213c 04060000 		.word XT_EQUAL
  39 2140 720F0000 		.word XT_DOCONDBRANCH, PFA_NUMBER6
  39      6C210000 
  40 2148 50010000 		.word XT_R_FROM
  41 214c 720F0000 	        .word XT_DOCONDBRANCH, PFA_NUMBER3
  41      58210000 
  42 2154 24080000 	        .word XT_DNEGATE
  43              	PFA_NUMBER3:
  44 2158 860F0000 		.word XT_DOLITERAL,2
  44      02000000 
  45 2160 680F0000 		.word XT_DOBRANCH, PFA_NUMBER5
  45      A8210000 
  46              	PFA_NUMBER2:
  47 2168 48000000 		.word XT_DROP
  48              	PFA_NUMBER6:
  49 216c EC060000 		.word XT_2DROP
  50 2170 50010000 		.word XT_R_FROM
  51 2174 48000000 		.word XT_DROP
  52 2178 50010000 	        .word XT_R_FROM
  53 217c E80A0000 	        .word XT_BASE
  54 2180 30020000 	        .word XT_STORE
  55 2184 F00F0000 		.word XT_ZERO
  56 2188 24000000 		.word XT_EXIT
  57              	PFA_NUMBER1:
  58 218c EC060000 	    .word XT_2DROP 
  59 2190 50010000 	    .word XT_R_FROM
  60 2194 720F0000 	    .word XT_DOCONDBRANCH, PFA_NUMBER4
  60      A0210000 
  61 219c 4C020000 	    .word XT_NEGATE
  62              	PFA_NUMBER4:
  63 21a0 860F0000 	    .word XT_DOLITERAL, 1
  63      01000000 
  64              	PFA_NUMBER5:
  65 21a8 50010000 	    .word XT_R_FROM
  66 21ac E80A0000 	    .word XT_BASE
  67 21b0 30020000 	    .word XT_STORE
  68 21b4 58100000 	    .word XT_TRUE
  69 21b8 24000000 	    .word XT_EXIT
  72              	.include "words/q-sign.s"
   1              	
   2 21bc 40080000 	NONAME QSIGN
   3              	
   4 21c0 A8000000 	    .word XT_OVER 
   5 21c4 C4040000 	    .word XT_CFETCH
   6 21c8 860F0000 	    .word XT_DOLITERAL
   7 21cc 2D000000 	    .word 45 
   8 21d0 04060000 	    .word XT_EQUAL  
   9 21d4 78000000 	    .word XT_DUP
ARM GAS  amforth.asm 			page 60


  10 21d8 38010000 	    .word XT_TO_R
  11 21dc 720F0000 	    .word XT_DOCONDBRANCH, PFA_NUMBERSIGN_DONE
  11      F0210000 
  12 21e4 860F0000 	    .word XT_DOLITERAL, 1
  12      01000000 
  13 21ec 001B0000 	    .word XT_SLASHSTRING
  14              	PFA_NUMBERSIGN_DONE:
  15 21f0 50010000 	    .word XT_R_FROM
  16 21f4 24000000 	    .word XT_EXIT
  73              	.include "words/set-base.s"
   1              	
   2 21f8 94200000 	DATA "bases", BASES
   2      00000000 
   2      05626173 
   2      6573C046 
   2      E80E0000 
   3 220c 0A000000 	    .word 10,16,2,10 
   3      10000000 
   3      02000000 
   3      0A000000 
   4              	
   5 221c FC210000 	COLON "set-base", SET_BASE
   5      00000000 
   5      08736574 
   5      2D626173 
   5      6500C046 
   6 2234 A8000000 	    .word XT_OVER
   7 2238 C4040000 	    .word XT_CFETCH
   8 223c 860F0000 	    .word XT_DOLITERAL
   9 2240 23000000 	    .word 35
  10 2244 140B0000 	    .word XT_MINUS
  11 2248 78000000 	    .word XT_DUP
  12 224c F00F0000 	    .word XT_ZERO
  13 2250 860F0000 	    .word XT_DOLITERAL
  14 2254 04000000 	    .word 4
  15 2258 3C1F0000 	    .word XT_WITHIN
  16 225c 720F0000 	    .word XT_DOCONDBRANCH,SET_BASE1
  16      90220000 
  17 2264 A80B0000 	        .word XT_CELLS
  18 2268 08220000 		.word XT_BASES
  19 226c FC0A0000 		.word XT_PLUS
  20 2270 1C020000 		.word XT_FETCH
  21 2274 E80A0000 		.word XT_BASE
  22 2278 30020000 		.word XT_STORE
  23 227c 860F0000 		.word XT_DOLITERAL,1
  23      01000000 
  24 2284 001B0000 		.word XT_SLASHSTRING
  25 2288 680F0000 		.word XT_DOBRANCH,SET_BASE2
  25      94220000 
  26              	SET_BASE1:
  27 2290 48000000 		.word XT_DROP
  28              	SET_BASE2:
  29 2294 24000000 	    .word XT_EXIT 
  74              	.include "words/rec-null.s"
   1              	
   2 2298 20220000 	DATA "rectype-null", RECTYPE_NULL
   2      00000000 
ARM GAS  amforth.asm 			page 61


   2      0C726563 
   2      74797065 
   2      2D6E756C 
   3 22b4 C0220000 	    .word XT_FAIL  
   4 22b8 C0220000 	    .word XT_FAIL  
   5 22bc C0220000 	    .word XT_FAIL  
   6              	
   7 22c0 40080000 	NONAME FAIL
   8 22c4 860F0000 	    .word XT_DOLITERAL
   9 22c8 F3FFFFFF 	    .word -13
  10 22cc 98180000 	    .word XT_THROW
  75              	.include "words/rec-find.s"
   1              	
   2 22d0 9C220000 	COLON "rec-find", REC_FIND
   2      00000000 
   2      08726563 
   2      2D66696E 
   2      6400C046 
   3 22e8 541C0000 	    .word XT_FINDXT
   4 22ec 78000000 	    .word XT_DUP
   5 22f0 F0040000 	    .word XT_ZEROEQUAL, XT_DOCONDBRANCH, PFA_REC_WORD_FOUND
   5      720F0000 
   5      08230000 
   6 22fc 48000000 	        .word XT_DROP
   7 2300 B0220000 		.word XT_RECTYPE_NULL
   8 2304 24000000 		.word XT_EXIT
   9              	PFA_REC_WORD_FOUND:
  10 2308 24230000 	    .word XT_RECTYPE_XT
  11              	
  12 230c 24000000 	    .word XT_EXIT
  13              	
  14 2310 D4220000 	DATA "rectype-xt", RECTYPE_XT
  14      00000000 
  14      0A726563 
  14      74797065 
  14      2D787400 
  15 2328 34230000 	    .word XT_R_WORD_INTERPRET
  16 232c 44230000 	    .word XT_R_WORD_COMPILE
  17 2330 341B0000 	    .word XT_2LITERAL
  18              	
  19 2334 40080000 	NONAME R_WORD_INTERPRET
  20 2338 48000000 	    .word XT_DROP 
  21 233c C00C0000 	    .word XT_EXECUTE
  22 2340 24000000 	    .word XT_EXIT
  23              	
  24 2344 40080000 	NONAME R_WORD_COMPILE
  25 2348 20050000 	    .word XT_ZEROLESS
  26 234c 720F0000 	    .word XT_DOCONDBRANCH,PFA_R_WORD_COMPILE1
  26      5C230000 
  27 2354 A81B0000 		.word XT_COMMA
  28 2358 24000000 	        .word XT_EXIT
  29              	PFA_R_WORD_COMPILE1:
  30 235c C00C0000 	        .word XT_EXECUTE
  31 2360 24000000 	    .word XT_EXIT
  76              	.include "words/rec-intnum.s"
   1              	
   2 2364 14230000 	DATA "rectype-num", RECTYPE_NUM
ARM GAS  amforth.asm 			page 62


   2      00000000 
   2      0B726563 
   2      74797065 
   2      2D6E756D 
   3 237c C00D0000 	    .word XT_NOOP    
   4 2380 581B0000 	    .word XT_LITERAL 
   5 2384 581B0000 	    .word XT_LITERAL 
   6              	
   7 2388 68230000 	DATA "rectype-dnum", RECTYPE_DNUM
   7      00000000 
   7      0C726563 
   7      74797065 
   7      2D646E75 
   8 23a4 C00D0000 	    .word XT_NOOP 
   9 23a8 341B0000 	    .word XT_2LITERAL
  10 23ac 341B0000 	    .word XT_2LITERAL
  11              	
  12 23b0 8C230000 	COLON "rec-num", REC_NUM
  12      00000000 
  12      07726563 
  12      2D6E756D 
  12      40080000 
  13 23c4 A0200000 	    .word XT_NUMBER
  14 23c8 720F0000 	    .word XT_DOCONDBRANCH,PFA_REC_NONUMBER
  14      F4230000 
  15 23d0 860F0000 	    .word XT_DOLITERAL,1
  15      01000000 
  16 23d8 04060000 	    .word XT_EQUAL
  17 23dc 720F0000 	    .word XT_DOCONDBRANCH, PFA_REC_INTNUM2
  17      EC230000 
  18 23e4 78230000 	      .word XT_RECTYPE_NUM
  19 23e8 24000000 	      .word XT_EXIT
  20              	PFA_REC_INTNUM2:
  21 23ec A0230000 	      .word XT_RECTYPE_DNUM
  22 23f0 24000000 	      .word XT_EXIT
  23              	PFA_REC_NONUMBER:
  24 23f4 B0220000 	    .word XT_RECTYPE_NULL
  25 23f8 24000000 	    .word XT_EXIT
  77              	.include "words/rec-split.s"
   1 23fc B4230000 	COLON "rec-split", REC_SPLIT
   1      00000000 
   1      09726563 
   1      2D73706C 
   1      6974C046 
   2 2414 34240000 	    .word XT_RECTYPE_SPLIT
   3 2418 24000000 	    .word XT_EXIT
   4              	
   5 241c 00240000 	DATA "rectype-split", RECTYPE_SPLIT
   5      00000000 
   5      0D726563 
   5      74797065 
   5      2D73706C 
   6 2438 54240000 	    .word XT_SPLIT  
   7 243c 54240000 	    .word XT_SPLIT  
   8 2440 54240000 	    .word XT_SPLIT  
   9              	
  10 2444 20240000 	COLON "split", SPLIT
ARM GAS  amforth.asm 			page 63


  10      00000000 
  10      0573706C 
  10      6974C046 
  10      40080000 
  11 2458 E4140000 	    .word XT_DOTS,XT_CR,XT_TYPE,XT_CR
  11      FC100000 
  11      50280000 
  11      FC100000 
  12 2468 24000000 	    .word XT_EXIT
  78              	.include "words/rec-trace.s"
   1              	
   2 246c 48240000 	COLON "rec-trace", REC_TRACE
   2      00000000 
   2      09726563 
   2      2D747261 
   2      6365C046 
   3              	
   4 2484 48000000 	    .word XT_DROP, XT_TO_R
   4      38010000 
   5 248c B60E0000 	    STRING " | "
   5      03207C20 
   6 2494 50010000 	    .word XT_R_FROM,XT_SOURCE,XT_PLUS,XT_OVER
   6      EC180000 
   6      FC0A0000 
   6      A8000000 
   7 24a4 140B0000 	    .word XT_MINUS,XT_TYPE,XT_CR
   7      50280000 
   7      FC100000 
   8 24b0 B0220000 	    .word XT_RECTYPE_NULL
   9 24b4 24000000 	    .word XT_EXIT
  79              	.include "words/forth-recognizer.s"
   1              	
   2 24b8 70240000 	VALUE "forth-recognizer", FORTHRECOGNIZER, PFA_CFG_RECOGNIZER
   2      A0000000 
   2      10666F72 
   2      74682D72 
   2      65636F67 
   3              	
   4 24e8 BC240000 	DATA "cfg-recognizer", CFG_RECOGNIZER
   4      00000000 
   4      0E636667 
   4      2D726563 
   4      6F676E69 
   5              	
   6 2504 02000000 	.word 2
   7              	
   8 2508 E4220000 	.word XT_REC_FIND
   9 250c C0230000 	.word XT_REC_NUM
  10              	
  80              	.include "words/recognize.s"
   1              	
   2 2510 EC240000 	COLON "recognize", RECOGNIZE
   2      00000000 
   2      09726563 
   2      6F676E69 
   2      7A65C046 
   3              	
ARM GAS  amforth.asm 			page 64


   4 2528 860F0000 	    .word XT_DOLITERAL
   5 252c 50250000 	    .word XT_RECOGNIZE_A
   6 2530 60000000 	    .word XT_SWAP
   7 2534 18260000 	    .word XT_MAPSTACK
   8 2538 F0040000 	    .word XT_ZEROEQUAL
   9 253c 720F0000 	    .word XT_DOCONDBRANCH, PFA_RECOGNIZE1
   9      4C250000 
  10 2544 EC060000 	      .word XT_2DROP
  11 2548 B0220000 	      .word XT_RECTYPE_NULL
  12              	PFA_RECOGNIZE1:
  13 254c 24000000 	    .word XT_EXIT
  14              	
  15 2550 40080000 	NONAME RECOGNIZE_A
  16 2554 C0000000 	   .word XT_ROT
  17 2558 C0000000 	   .word XT_ROT
  18 255c 9C080000 	   .word XT_2DUP 
  19 2560 4C070000 	   .word XT_2TO_R
  20 2564 C0000000 	   .word XT_ROT
  21 2568 C00C0000 	   .word XT_EXECUTE
  22 256c 68070000 	   .word XT_2R_FROM
  23 2570 C0000000 	   .word XT_ROT
  24 2574 78000000 	   .word XT_DUP
  25 2578 B0220000 	   .word XT_RECTYPE_NULL
  26 257c 04060000 	   .word XT_EQUAL
  27 2580 720F0000 	   .word XT_DOCONDBRANCH,PFA_RECOGNIZE_A1
  27      94250000 
  28 2588 48000000 	     .word XT_DROP
  29 258c F00F0000 	     .word XT_ZERO
  30 2590 24000000 	     .word XT_EXIT
  31              	PFA_RECOGNIZE_A1:
  32 2594 90000000 	   .word XT_NIP 
  33 2598 90000000 	   .word XT_NIP
  34 259c 58100000 	   .word XT_TRUE
  35 25a0 24000000 	   .word XT_EXIT
  81              	
  82              	.include "words/interpret.s"
   1              	
   2 25a4 14250000 	COLON "interpret", INTERPRET
   2      00000000 
   2      09696E74 
   2      65727072 
   2      6574C046 
   3 25bc 481A0000 	    .word XT_PARSENAME 
   4 25c0 78000000 	    .word XT_DUP
   5 25c4 720F0000 	    .word XT_DOCONDBRANCH,PFA_INTERPRET2
   5      FC250000 
   6 25cc D4240000 	      .word XT_FORTHRECOGNIZER
   7 25d0 24250000 	      .word XT_RECOGNIZE
   8 25d4 C00B0000 	      .word XT_STATE
   9 25d8 1C020000 	      .word XT_FETCH
  10 25dc 720F0000 	      .word XT_DOCONDBRANCH, PFA_INTERPRET1
  10      E8250000 
  11 25e4 900B0000 	        .word XT_CELLPLUS   
  12              	PFA_INTERPRET1:
  13 25e8 1C020000 	      .word XT_FETCH
  14 25ec C00C0000 	      .word XT_EXECUTE
  15 25f0 38190000 	      .word XT_QSTACK
ARM GAS  amforth.asm 			page 65


  16 25f4 680F0000 	    .word XT_DOBRANCH, PFA_INTERPRET
  16      BC250000 
  17              	PFA_INTERPRET2:
  18 25fc EC060000 	    .word XT_2DROP
  19 2600 24000000 	    .word XT_EXIT
  83              	.include "words/map-stack.s"
   1              	
   2 2604 A8250000 	COLON "map-stack", MAPSTACK
   2      00000000 
   2      096D6170 
   2      2D737461 
   2      636BC046 
   3 261c 78000000 	    .word XT_DUP
   4 2620 900B0000 	    .word XT_CELLPLUS
   5 2624 60000000 	    .word XT_SWAP
   6 2628 1C020000 	    .word XT_FETCH
   7 262c A80B0000 	    .word XT_CELLS
   8 2630 E40D0000 	    .word XT_BOUNDS
   9 2634 C4260000 	    .word XT_QDOCHECK, XT_DOCONDBRANCH,PFA_MAPSTACK3
   9      720F0000 
   9      8C260000 
  10 2640 F80D0000 	    .word XT_DODO
  11              	PFA_MAPSTACK1:
  12 2644 680E0000 	      .word XT_I
  13 2648 1C020000 	      .word XT_FETCH
  14 264c 60000000 	      .word XT_SWAP
  15 2650 38010000 	      .word XT_TO_R
  16 2654 68010000 	      .word XT_R_FETCH
  17 2658 C00C0000 	      .word XT_EXECUTE
  18 265c E0000000 	      .word XT_QDUP
  19 2660 720F0000 	      .word XT_DOCONDBRANCH,PFA_MAPSTACK2
  19      78260000 
  20 2668 50010000 	         .word XT_R_FROM
  21 266c 48000000 	         .word XT_DROP
  22 2670 500E0000 	         .word XT_UNLOOP
  23 2674 24000000 	         .word XT_EXIT
  24              	PFA_MAPSTACK2:
  25 2678 50010000 	      .word XT_R_FROM
  26 267c 860F0000 	      .word XT_DOLITERAL,4
  26      04000000 
  27 2684 200E0000 	      .word XT_DOPLUSLOOP,PFA_MAPSTACK1
  27      44260000 
  28              	PFA_MAPSTACK3:
  29 268c 48000000 	    .word XT_DROP
  30 2690 F00F0000 	    .word XT_ZERO
  31 2694 24000000 	    .word XT_EXIT
  84              	.include "words/qdo.s"
   1              	
   2 2698 08260000 	IMMED "?do", QDO
   2      10000000 
   2      033F646F 
   2      40080000 
   3 26a8 7C1B0000 	    .word XT_COMPILE
   4 26ac C4260000 	    .word XT_QDOCHECK
   5 26b0 AC2B0000 	    .word XT_IF
   6 26b4 142F0000 	    .word XT_DO
   7 26b8 60000000 	    .word XT_SWAP
ARM GAS  amforth.asm 			page 66


   8 26bc 102B0000 	    .word XT_TO_L
   9 26c0 24000000 	    .word XT_EXIT
  10              	
  11 26c4 40080000 	NONAME QDOCHECK
  12 26c8 9C080000 	    .word XT_2DUP
  13 26cc 04060000 	    .word XT_EQUAL
  14 26d0 78000000 	    .word XT_DUP
  15 26d4 38010000 	    .word XT_TO_R
  16 26d8 720F0000 	    .word XT_DOCONDBRANCH, PFA_QDOCHECK1
  16      E4260000 
  17 26e0 EC060000 	    .word XT_2DROP
  18              	PFA_QDOCHECK1:
  19 26e4 50010000 	    .word XT_R_FROM
  20 26e8 E0030000 	    .word XT_INVERT
  21 26ec 24000000 	    .word XT_EXIT
  22              	
  85              	
  86              	.include "words/init-ram.s"
   1              	
   2 26f0 9C260000 	COLON "init-ram", INIT_RAM
   2      00000000 
   2      08696E69 
   2      742D7261 
   2      6D00C046 
   3              	
   4 2708 860F0000 	    .word XT_DOLITERAL, RAM_lower_userarea, XT_UP_STORE
   4      00000000 
   4      5C0F0000 
   5 2714 860F0000 	    .word XT_DOLITERAL, XT_FORTH_WORDLIST, XT_TO_BODY,XT_DUP,XT_CELLPLUS,XT_FETCH,XT_SWAP,XT_FETCH,
   5      903A0000 
   5      48320000 
   5      78000000 
   5      900B0000 
   6 2738 860F0000 	    .word XT_DOLITERAL, XT_DOINITS, XT_FORTH_WORDLIST, XT_TRAVERSEWORDLIST
   6      4C270000 
   6      903A0000 
   6      241D0000 
   7 2748 24000000 	    .word XT_EXIT
   8              	
   9 274c 40080000 	NONAME DOINITS
  10 2750 78000000 	    .word XT_DUP
  11 2754 D01E0000 	    .word XT_NAME2FLAGS,XT_FETCH, XT_DOLITERAL, Flag_init, XT_DUP,XT_ROT,XT_AND,XT_EQUAL
  11      1C020000 
  11      860F0000 
  11      80000000 
  11      78000000 
  12 2774 720F0000 	    .word XT_DOCONDBRANCH,PFA_DOINIT_1
  12      A4270000 
  13 277c F01C0000 		.word XT_NFA2CFA 
  14 2780 48320000 		.word XT_TO_BODY,XT_DUP,XT_CELLPLUS, XT_FETCH, XT_SWAP, XT_FETCH, XT_STORE
  14      78000000 
  14      900B0000 
  14      1C020000 
  14      60000000 
  15 279c 58100000 		.word XT_TRUE
  16 27a0 24000000 		.word XT_EXIT
  17              	PFA_DOINIT_1:
ARM GAS  amforth.asm 			page 67


  18 27a4 48000000 	    .word XT_DROP
  19 27a8 58100000 	    .word XT_TRUE
  20 27ac 24000000 	    .word XT_EXIT
  87              	.include "words/ver.s"
   1              	
   2 27b0 F4260000 	COLON "ver", DOT_VER
   2      00000000 
   2      03766572 
   2      40080000 
   3              	
   4 27c0 84330000 	.word XT_ENV_FORTHNAME, XT_TYPE, XT_SPACE
   4      50280000 
   4      40110000 
   5              	
   6 27cc E80A0000 	.word XT_BASE, XT_FETCH
   6      1C020000 
   7 27d4 A8330000 	.word XT_ENV_FORTHVERSION, XT_DECIMAL, XT_S2D
   7      E4110000 
   7      CC0A0000 
   8 27e0 E8120000 	.word XT_L_SHARP, XT_SHARP
   8      08130000 
   9 27e8 860F0000 	.word XT_DOLITERAL, '.'
   9      2E000000 
  10 27f0 AC120000 	.word XT_HOLD, XT_SHARP_S, XT_SHARP_G
  10      60130000 
  10      8C130000 
  11 27fc 50280000 	.word XT_TYPE, XT_BASE, XT_STORE
  11      E80A0000 
  11      30020000 
  12              	
  13 2808 40110000 	.word XT_SPACE, XT_ENV_CPU, XT_TYPE
  13      C4330000 
  13      50280000 
  14              	
  15 2814 24000000 	.word XT_EXIT
  88              	
  89              	.include "words/count.s"
   1              	
   2 2818 B4270000 	COLON "count", COUNT
   2      00000000 
   2      05636F75 
   2      6E74C046 
   2      40080000 
   3              	
   4 282c 78000000 	.word XT_DUP,XT_1PLUS,XT_SWAP,XT_CFETCH,XT_EXIT
   4      2C0B0000 
   4      60000000 
   4      C4040000 
   4      24000000 
  90              	.include "words/type.s"
   1              	
   2 2840 1C280000 	COLON "type", TYPE
   2      00000000 
   2      04747970 
   2      6500C046 
   2      40080000 
   3              	
ARM GAS  amforth.asm 			page 68


   4 2854 E40D0000 	 .word XT_BOUNDS
   5 2858 C4260000 	 .word XT_QDOCHECK,XT_DOCONDBRANCH,PFA_TYPE_LEAVE
   5      720F0000 
   5      7C280000 
   6 2864 F80D0000 	 .word XT_DODO
   7              	PFA_TYPE_LOOP:
   8 2868 680E0000 	   .word XT_I, XT_CFETCH, XT_EMIT
   8      C4040000 
   8      3C0D0000 
   9 2874 160E0000 	   .word XT_DOLOOP,PFA_TYPE_LOOP
   9      68280000 
  10              	PFA_TYPE_LEAVE:
  11 287c 24000000 	 .word XT_EXIT
  12              	
  13 2880 44280000 	COLON "itype", ITYPE
  13      00000000 
  13      05697479 
  13      7065C046 
  13      40080000 
  14 2894 50280000 	    .word XT_TYPE,XT_EXIT
  14      24000000 
  91              	.include "words/squote.s"
   1              	
   2 289c 84280000 	IMMED "s\x22", SQUOTE 
   2      10000000 
   2      02732200 
   2      40080000 
   3 28ac 860F0000 	    .word XT_DOLITERAL
   4 28b0 22000000 	    .word 34  
   5 28b4 B01A0000 	    .word XT_PARSE       
   6 28b8 C00B0000 	    .word XT_STATE
   7 28bc 1C020000 	    .word XT_FETCH
   8 28c0 720F0000 	    .word XT_DOCONDBRANCH, PFA_SQUOTE1
   8      CC280000 
   9 28c8 60290000 	      .word XT_SLITERAL
  10              	PFA_SQUOTE1:
  11 28cc 24000000 	    .word XT_EXIT
  92              	.include "words/dot-quote.s"
   1              	
   2 28d0 A0280000 	IMMED ".\x22", DOT_QUOTE
   2      10000000 
   2      022E2200 
   2      40080000 
   3 28e0 A8280000 	    .word XT_SQUOTE
   4 28e4 7C1B0000 	    .word XT_COMPILE
   5 28e8 50280000 	    .word XT_TYPE
   6 28ec 24000000 	    .word XT_EXIT
  93              	.include "words/scomma.s"
   1              	
   2 28f0 D4280000 	COLON "s,", SCOMMA
   2      00000000 
   2      02732C00 
   2      40080000 
   3 2900 78000000 	    .word XT_DUP, XT_CCOMMA
   3      D01B0000 
   4 2908 F00F0000 	    .word XT_ZERO
   5 290c C4260000 	    .word XT_QDOCHECK
ARM GAS  amforth.asm 			page 69


   6 2910 720F0000 	    .word XT_DOCONDBRANCH, PFA_SCOMMA2
   6      34290000 
   7 2918 F80D0000 	    .word XT_DODO
   8              	PFA_SCOMMA1:
   9 291c 78000000 	    .word XT_DUP
  10 2920 C4040000 	    .word XT_CFETCH
  11 2924 D01B0000 	    .word XT_CCOMMA
  12 2928 2C0B0000 	    .word XT_1PLUS
  13 292c 160E0000 	    .word XT_DOLOOP
  14 2930 1C290000 	    .word PFA_SCOMMA1
  15              	PFA_SCOMMA2:
  16 2934 48000000 	    .word XT_DROP
  17 2938 B0320000 	    .word XT_DP, XT_ALIGNED, XT_DOTO, XT_DP
  17      A80E0000 
  17      98310000 
  17      B0320000 
  18 2948 24000000 	    .word XT_EXIT
  94              	.include "words/sliteral.s"
   1              	
   2 294c F4280000 	IMMED "sliteral", SLITERAL
   2      10000000 
   2      08736C69 
   2      74657261 
   2      6C00C046 
   3 2964 7C1B0000 	    .word XT_COMPILE
   4 2968 B60E0000 	    .word XT_DOSLITERAL
   5 296c FC280000 	    .word XT_SCOMMA
   6 2970 24000000 	    .word XT_EXIT
  95              	.include "words/words.s"
   1              	
   2 2974 50290000 	COLON "words", WORDS
   2      00000000 
   2      05776F72 
   2      6473C046 
   2      40080000 
   3 2988 903A0000 	    .word XT_FORTH_WORDLIST, XT_SHOWWORDLIST
   3      841D0000 
   4 2990 24000000 	    .word XT_EXIT
  96              	
  97              	.include "words/l-mark.s"
   1              	
   2 2994 40080000 	NONAME LMARK
   3 2998 B0320000 	    .word XT_DP
   4 299c 24000000 	    .word XT_EXIT
  98              	.include "words/l-resolve.s"
   1              	
   2 29a0 40080000 	NONAME LRESOLVE
   3 29a4 38190000 	    .word XT_QSTACK
   4 29a8 A81B0000 	    .word XT_COMMA
   5 29ac 24000000 	    .word XT_EXIT
  99              	.include "words/g-mark.s"
   1              	
   2 29b0 40080000 	NONAME GMARK
   3 29b4 B0320000 	    .word XT_DP
   4 29b8 7C1B0000 	    .word XT_COMPILE
   5 29bc FFFFFFFF 	    .word -1
   6 29c0 24000000 	    .word XT_EXIT
ARM GAS  amforth.asm 			page 70


 100              	.include "words/g-resolve.s"
   1              	
   2 29c4 40080000 	NONAME GRESOLVE
   3 29c8 38190000 	    .word XT_QSTACK
   4 29cc B0320000 	    .word XT_DP
   5 29d0 60000000 	    .word XT_SWAP
   6 29d4 30020000 	    .word XT_STORE
   7 29d8 24000000 	    .word XT_EXIT
 101              	.include "words/ahead.s"
   1              	
   2 29dc 78290000 	IMMED "ahead", AHEAD
   2      10000000 
   2      05616865 
   2      6164C046 
   2      40080000 
   3 29f0 7C1B0000 	    .word XT_COMPILE
   4 29f4 680F0000 	    .word XT_DOBRANCH
   5 29f8 B0290000 	    .word XT_GMARK
   6 29fc 24000000 	    .word XT_EXIT
 102              	.include "words/begin.s"
   1              	
   2 2a00 E0290000 	IMMED "begin", BEGIN
   2      10000000 
   2      05626567 
   2      696EC046 
   2      40080000 
   3 2a14 94290000 	    .word XT_LMARK
   4 2a18 24000000 	    .word XT_EXIT
 103              	.include "words/then.s"
   1              	
   2 2a1c 042A0000 	IMMED "then", THEN
   2      10000000 
   2      04746865 
   2      6E00C046 
   2      40080000 
   3 2a30 C4290000 	    .word XT_GRESOLVE
   4 2a34 24000000 	    .word XT_EXIT
 104              	.include "words/until.s"
   1              	
   2 2a38 202A0000 	IMMED "until", UNTIL
   2      10000000 
   2      05756E74 
   2      696CC046 
   2      40080000 
   3 2a4c 860F0000 	    .word XT_DOLITERAL
   4 2a50 720F0000 	    .word XT_DOCONDBRANCH
   5 2a54 A81B0000 	    .word XT_COMMA
   6              	
   7 2a58 A0290000 	    .word XT_LRESOLVE
   8 2a5c 24000000 	    .word XT_EXIT
 105              	.include "words/while.s"
   1              	
   2 2a60 3C2A0000 	IMMED "while", WHILE
   2      10000000 
   2      05776869 
   2      6C65C046 
   2      40080000 
ARM GAS  amforth.asm 			page 71


   3 2a74 AC2B0000 	    .word XT_IF
   4 2a78 60000000 	    .word XT_SWAP
   5 2a7c 24000000 	    .word XT_EXIT
 106              	.include "words/repeat.s"
   1              	
   2 2a80 642A0000 	IMMED "repeat", REPEAT
   2      10000000 
   2      06726570 
   2      65617400 
   2      40080000 
   3 2a94 FC2B0000 	    .word XT_AGAIN
   4 2a98 2C2A0000 	    .word XT_THEN
   5 2a9c 24000000 	    .word XT_EXIT
 107              	.include "words/leave.s"
   1              	
   2 2aa0 842A0000 	VALUE "lp0", LP0, RAM_upper_leavestack
   2      A0000000 
   2      036C7030 
   2      F40E0000 
   2      A8090000 
   3 2ac0 A42A0000 	VARIABLE "lp", LP
   3      01010000 
   3      026C7000 
   3      DA0E0000 
   3      AC090000 
   4              	
   5 2ad4 C42A0000 	COLON "l>", L_FROM
   5      00000000 
   5      026C3E00 
   5      40080000 
   6 2ae4 CC2A0000 	    .word XT_LP
   7 2ae8 1C020000 	    .word XT_FETCH
   8 2aec 1C020000 	    .word XT_FETCH
   9 2af0 860F0000 	    .word XT_DOLITERAL
  10 2af4 04000000 	    .word 4
  11 2af8 CC2A0000 	    .word XT_LP
  12 2afc A8040000 	    .word XT_PLUSSTORE
  13 2b00 24000000 	    .word XT_EXIT
  14              	
  15 2b04 D82A0000 	COLON ">l", TO_L
  15      00000000 
  15      023E6C00 
  15      40080000 
  16              	
  17 2b14 860F0000 	    .word XT_DOLITERAL,-4
  17      FCFFFFFF 
  18 2b1c CC2A0000 	    .word XT_LP
  19 2b20 A8040000 	    .word XT_PLUSSTORE
  20 2b24 CC2A0000 	    .word XT_LP
  21 2b28 1C020000 	    .word XT_FETCH
  22 2b2c 30020000 	    .word XT_STORE
  23 2b30 24000000 	    .word XT_EXIT
  24              	
  25 2b34 082B0000 	IMMED "leave", LEAVE
  25      10000000 
  25      056C6561 
  25      7665C046 
ARM GAS  amforth.asm 			page 72


  25      40080000 
  26 2b48 7C1B0000 	    .word XT_COMPILE,XT_UNLOOP
  26      500E0000 
  27 2b50 EC290000 	    .word XT_AHEAD,XT_TO_L,XT_EXIT
  27      102B0000 
  27      24000000 
 108              	.include "words/immediate.s"
   1              	
   2 2b5c 382B0000 	COLON "immediate", IMMEDIATE
   2      00000000 
   2      09696D6D 
   2      65646961 
   2      7465C046 
   3              	
   4 2b74 68320000 	    .word XT_GET_CURRENT,XT_EXECUTE
   4      C00C0000 
   5 2b7c 78000000 	    .word XT_DUP, XT_DOLITERAL,Flag_immediate
   5      860F0000 
   5      10000000 
   6 2b88 C0000000 	    .word XT_ROT, XT_FETCH, XT_OR, XT_SWAP, XT_STORE
   6      1C020000 
   6      98030000 
   6      60000000 
   6      30020000 
   7 2b9c 24000000 	    .word XT_EXIT
 109              	.include "words/if.s"
   1              	
   2 2ba0 602B0000 	IMMED "if", IF
   2      10000000 
   2      02696600 
   2      40080000 
   3 2bb0 7C1B0000 	    .word XT_COMPILE
   4 2bb4 720F0000 	    .word XT_DOCONDBRANCH
   5 2bb8 B0290000 	    .word XT_GMARK
   6 2bbc 24000000 	    .word XT_EXIT
 110              	.include "words/else.s"
   1              	
   2 2bc0 A42B0000 	IMMED "else", ELSE
   2      10000000 
   2      04656C73 
   2      6500C046 
   2      40080000 
   3              	
   4 2bd4 7C1B0000 	    .word XT_COMPILE
   5 2bd8 680F0000 	    .word XT_DOBRANCH
   6 2bdc B0290000 	    .word XT_GMARK
   7 2be0 60000000 	    .word XT_SWAP
   8 2be4 C4290000 	    .word XT_GRESOLVE
   9 2be8 24000000 	    .word XT_EXIT
 111              	.include "words/again.s"
   1              	
   2 2bec C42B0000 	IMMED "again", AGAIN
   2      10000000 
   2      05616761 
   2      696EC046 
   2      40080000 
   3 2c00 7C1B0000 	    .word XT_COMPILE
ARM GAS  amforth.asm 			page 73


   4 2c04 680F0000 	    .word XT_DOBRANCH
   5 2c08 A0290000 	    .word XT_LRESOLVE
   6 2c0c 24000000 	    .word XT_EXIT
 112              	.include "words/turnkey.s"
   1              	
   2 2c10 F02B0000 	DEFER "turnkey", TURNKEY, XT_APPLTURNKEY
   2      C0000000 
   2      07747572 
   2      6E6B6579 
   2      040F0000 
 113              	
 114              	.include "words/tick.s"
   1              	
   2 2c34 142C0000 	COLON "'", TICK
   2      00000000 
   2      0127C046 
   2      40080000 
   3 2c44 481A0000 	    .word XT_PARSENAME
   4 2c48 D4240000 	    .word XT_FORTHRECOGNIZER
   5 2c4c 24250000 	    .word XT_RECOGNIZE
   6              	    # a word is tickable unless RECTYPE-TOKEN is RECTYPE-NULL or 
   7              	    # the interpret action is a NOOP
   8 2c50 78000000 	    .word XT_DUP
   9 2c54 B0220000 	    .word XT_RECTYPE_NULL
  10 2c58 04060000 	    .word XT_EQUAL
  11 2c5c 60000000 	    .word XT_SWAP
  12 2c60 1C020000 	    .word XT_FETCH
  13 2c64 860F0000 	    .word XT_DOLITERAL
  14 2c68 C00D0000 	    .word XT_NOOP
  15 2c6c 04060000 	    .word XT_EQUAL
  16 2c70 98030000 	    .word XT_OR
  17 2c74 720F0000 	    .word XT_DOCONDBRANCH, PFA_TICK1
  17      882C0000 
  18 2c7c 860F0000 	      .word XT_DOLITERAL
  19 2c80 F3FFFFFF 	      .word -13
  20 2c84 98180000 	      .word XT_THROW
  21              	PFA_TICK1:
  22 2c88 48000000 	    .word XT_DROP
  23 2c8c 24000000 	    .word XT_EXIT
  24              	
 115              	.include "words/abort.s"
   1              	
   2 2c90 382C0000 	COLON "abort" ABORT
   2      00000000 
   2      0561626F 
   2      7274C046 
   2      40080000 
   3 2ca4 58100000 	    .word XT_TRUE
   4 2ca8 98180000 	    .word XT_THROW
 116              	
 117              	.include "words/abort-string.s"
   1              	
   2 2cac 942C0000 	IMMED "abort\x22", ABORTQUOTE
   2      10000000 
   2      0661626F 
   2      72742200 
   2      40080000 
ARM GAS  amforth.asm 			page 74


   3              	
   4 2cc0 A8280000 	    .word XT_SQUOTE
   5 2cc4 7C1B0000 	    .word XT_COMPILE
   6 2cc8 98300000 	    .word XT_QABORT
   7 2ccc 24000000 	    .word XT_EXIT
 118              	.include "words/backslash.s"
   1              	
   2 2cd0 B02C0000 	IMMED "\\", BACKSLASH
   2      10000000 
   2      015CC046 
   2      40080000 
   3              	
   4 2ce0 EC180000 	    .word XT_SOURCE
   5 2ce4 90000000 	    .word XT_NIP
   6 2ce8 9C320000 	    .word XT_TO_IN
   7 2cec 30020000 	    .word XT_STORE
   8 2cf0 24000000 	    .word XT_EXIT
 119              	.include "words/bracketchar.s"
   1              	
   2 2cf4 D42C0000 	IMMED "[char]", BRACKETCHAR
   2      10000000 
   2      065B6368 
   2      61725D00 
   2      40080000 
   3 2d08 7C1B0000 	    .word XT_COMPILE
   4 2d0c 860F0000 	    .word XT_DOLITERAL
   5 2d10 742D0000 	    .word XT_CHAR
   6 2d14 A81B0000 	    .word XT_COMMA
   7 2d18 24000000 	    .word XT_EXIT
 120              	.include "words/bracketcompile.s"
   1              	
   2 2d1c F82C0000 	IMMED "[compile]", BRACKETCOMPILE
   2      10000000 
   2      095B636F 
   2      6D70696C 
   2      655DC046 
   3 2d34 7C1B0000 	    .word XT_COMPILE
   4 2d38 7C1B0000 	    .word XT_COMPILE
   5 2d3c 402C0000 	    .word XT_TICK
   6 2d40 A81B0000 	    .word XT_COMMA
   7 2d44 24000000 	    .word XT_EXIT
 121              	.include "words/brackettick.s"
   1              	
   2 2d48 202D0000 	IMMED "[\x27]" BRACKETTICK
   2      10000000 
   2      035B275D 
   2      40080000 
   3 2d58 402C0000 	    .word XT_TICK
   4 2d5c 581B0000 	    .word XT_LITERAL
   5 2d60 24000000 	    .word XT_EXIT
 122              	.include "words/char.s"
   1              	
   2 2d64 4C2D0000 	COLON "char", CHAR
   2      00000000 
   2      04636861 
   2      7200C046 
   2      40080000 
ARM GAS  amforth.asm 			page 75


   3 2d78 481A0000 	    .word XT_PARSENAME
   4 2d7c F0040000 	    .word XT_ZEROEQUAL,XT_DOCONDBRANCH,CHAR_1
   4      720F0000 
   4      942D0000 
   5 2d88 860F0000 	       .word XT_DOLITERAL, -16, XT_THROW
   5      F0FFFFFF 
   5      98180000 
   6              	CHAR_1:
   7 2d94 C4040000 	    .word XT_CFETCH
   8 2d98 24000000 	    .word XT_EXIT
 123              	.include "words/colon-noname.s"
   1              	
   2 2d9c 682D0000 	COLON ":noname", COLONNONAME
   2      00000000 
   2      073A6E6F 
   2      6E616D65 
   2      40080000 
   3 2db0 54120000 	    .word XT_HERE
   4 2db4 78000000 	    .word XT_DUP
   5 2db8 D02F0000 	    .word XT_LATEST
   6 2dbc 30020000 	    .word XT_STORE
   7              	
   8 2dc0 7C1B0000 	    .word XT_COMPILE
   9 2dc4 40080000 	    .word DOCOLON
  10              	
  11 2dc8 28310000 	    .word XT_RBRACKET
  12 2dcc 24000000 	    .word XT_EXIT
 124              	.include "words/colon.s"
   1              	
   2 2dd0 A02D0000 	COLON ":", COLON
   2      00000000 
   2      013AC046 
   2      40080000 
   3 2de0 D02E0000 	    .word XT_DOCREATE
   4 2de4 AC2D0000 	    .word XT_COLONNONAME
   5 2de8 48000000 	    .word XT_DROP
   6 2dec 24000000 	    .word XT_EXIT
 125              	.include "words/constant.s"
   1              	
   2 2df0 D42D0000 	COLON "constant", CONSTANT
   2      00000000 
   2      08636F6E 
   2      7374616E 
   2      7400C046 
   3 2e08 D02E0000 	    .word XT_DOCREATE
   4 2e0c EC300000 	    .word XT_REVEAL
   5 2e10 7C1B0000 	    .word XT_COMPILE
   6 2e14 DA0E0000 	    .word PFA_DOVARIABLE
   7 2e18 A81B0000 	    .word XT_COMMA
   8 2e1c 24000000 	    .word XT_EXIT
 126              	.include "words/create.s"
   1              	
   2 2e20 F42D0000 	COLON "create", CREATE
   2      00000000 
   2      06637265 
   2      61746500 
   2      40080000 
ARM GAS  amforth.asm 			page 76


   3 2e34 D02E0000 	    .word XT_DOCREATE
   4 2e38 EC300000 	    .word XT_REVEAL
   5 2e3c 7C1B0000 	    .word XT_COMPILE
   6 2e40 DA0E0000 	    .word PFA_DOVARIABLE
   7 2e44 24000000 	    .word XT_EXIT
 127              	.include "words/defer-fetch.s"
   1              	
   2 2e48 242E0000 	COLON "defer@", DEFERFETCH
   2      00000000 
   2      06646566 
   2      65724000 
   2      40080000 
   3 2e5c 48320000 	    .word XT_TO_BODY
   4 2e60 78000000 	    .word XT_DUP, XT_FETCH,XT_SWAP
   4      1C020000 
   4      60000000 
   5 2e6c 900B0000 	    .word XT_CELLPLUS
   6 2e70 900B0000 	    .word XT_CELLPLUS
   7 2e74 1C020000 	    .word XT_FETCH
   8 2e78 C00C0000 	    .word XT_EXECUTE
   9 2e7c 24000000 	    .word XT_EXIT
 128              	.include "words/defer-store.s"
   1              	
   2 2e80 4C2E0000 	COLON "defer!", DEFERSTORE
   2      00000000 
   2      06646566 
   2      65722100 
   2      40080000 
   3 2e94 48320000 	    .word XT_TO_BODY
   4 2e98 78000000 	    .word XT_DUP, XT_FETCH,XT_SWAP
   4      1C020000 
   4      60000000 
   5 2ea4 900B0000 	    .word XT_CELLPLUS
   6 2ea8 900B0000 	    .word XT_CELLPLUS
   7 2eac 900B0000 	    .word XT_CELLPLUS
   8 2eb0 1C020000 	    .word XT_FETCH
   9 2eb4 C00C0000 	    .word XT_EXECUTE
  10 2eb8 24000000 	    .word XT_EXIT
  11              	
 129              	.include "words/do-create.s"
   1              	
   2 2ebc 842E0000 	COLON "(create)", DOCREATE
   2      00000000 
   2      08286372 
   2      65617465 
   2      2900C046 
   3 2ed4 481A0000 	    .word XT_PARSENAME,XT_WLSCOPE
   3      24320000 
   4 2edc E42E0000 	    .word XT_DOCREATE_IN
   5 2ee0 24000000 	    .word XT_EXIT
   6              	
   7 2ee4 40080000 	NONAME DOCREATE_IN
   8 2ee8 78000000 	    .word XT_DUP,XT_NEWEST,XT_CELLPLUS,XT_STORE
   8      0C300000 
   8      900B0000 
   8      30020000 
   9 2ef8 782F0000 	    .word XT_HEADER,XT_NEWEST,XT_STORE         
ARM GAS  amforth.asm 			page 77


   9      0C300000 
   9      30020000 
  10 2f04 24000000 	    .word XT_EXIT
 130              	.include "words/do.s"
   1              	
   2 2f08 C02E0000 	IMMED "do", DO
   2      10000000 
   2      02646F00 
   2      40080000 
   3 2f18 7C1B0000 	    .word XT_COMPILE
   4 2f1c F80D0000 	    .word XT_DODO
   5 2f20 94290000 	    .word XT_LMARK
   6 2f24 F00F0000 	    .word XT_ZERO, XT_TO_L
   6      102B0000 
   7 2f2c 24000000 	    .word XT_EXIT
 131              	.include "words/endloop.s"
   1              	
   2 2f30 0C2F0000 	IMMED "endloop", ENDLOOP
   2      10000000 
   2      07656E64 
   2      6C6F6F70 
   2      40080000 
   3              	
   4 2f44 A0290000 	        .word XT_LRESOLVE
   5              	ENDLOOP1:
   6 2f48 E02A0000 	        .word XT_L_FROM,XT_QDUP,XT_DOCONDBRANCH, ENDLOOP2
   6      E0000000 
   6      720F0000 
   6      642F0000 
   7 2f58 2C2A0000 	        .word XT_THEN, XT_DOBRANCH, ENDLOOP1
   7      680F0000 
   7      482F0000 
   8              	ENDLOOP2:
   9 2f64 24000000 		.word XT_EXIT
  10              	
 132              	.include "words/header.s"
   1              	
   2 2f68 342F0000 	COLON "header", HEADER
   2      00000000 
   2      06686561 
   2      64657200 
   2      40080000 
   3              	
   4 2f7c A8000000 	    .word XT_OVER,XT_GREATERZERO 
   4      80320000 
   5 2f84 720F0000 	    .word XT_DOCONDBRANCH, PFA_HEADER1
   5      B42F0000 
   6 2f8c C00C0000 	    .word XT_EXECUTE
   7 2f90 A81B0000 	    .word XT_COMMA
   8 2f94 54120000 	    .word XT_HERE,XT_TO_R
   8      38010000 
   9 2f9c 860F0000 	    .word XT_DOLITERAL
  10 2fa0 00000000 	    .word Flag_visible
  11 2fa4 A81B0000 	    .word XT_COMMA
  12 2fa8 FC280000 	    .word XT_SCOMMA
  13 2fac 50010000 	    .word XT_R_FROM
  14 2fb0 24000000 	    .word XT_EXIT
ARM GAS  amforth.asm 			page 78


  15              	
  16              	PFA_HEADER1:
  17 2fb4 860F0000 	    .word XT_DOLITERAL
  18 2fb8 F0FFFFFF 	    .word -16
  19 2fbc 98180000 	    .word XT_THROW
 133              	.include "words/latest.s"
   1              	
   2 2fc0 6C2F0000 	VARIABLE "latest", LATEST
   2      01010000 
   2      066C6174 
   2      65737400 
   2      DA0E0000 
   3              	
 134              	.include "words/loop.s"
   1              	
   2 2fd8 C42F0000 	IMMED "loop", LOOP
   2      10000000 
   2      046C6F6F 
   2      7000C046 
   2      40080000 
   3 2fec 7C1B0000 	    .word XT_COMPILE
   4 2ff0 160E0000 	    .word XT_DOLOOP
   5 2ff4 402F0000 	    .word XT_ENDLOOP
   6 2ff8 24000000 	    .word XT_EXIT
 135              	.include "words/newest.s"
   1              	
   2 2ffc DC2F0000 	DVARIABLE "newest", NEWEST
   2      01010000 
   2      066E6577 
   2      65737400 
   2      DA0E0000 
 136              	.include "words/plusloop.s"
   1              	
   2 3014 00300000 	IMMED "+loop", PLUSLOOP
   2      10000000 
   2      052B6C6F 
   2      6F70C046 
   2      40080000 
   3 3028 7C1B0000 	    .word XT_COMPILE
   4 302c 200E0000 	    .word XT_DOPLUSLOOP
   5 3030 402F0000 	    .word XT_ENDLOOP
   6 3034 24000000 	    .word XT_EXIT
 137              	.include "words/postpone.s"
   1              	
   2 3038 18300000 	IMMED "postpone", POSTPONE
   2      10000000 
   2      08706F73 
   2      74706F6E 
   2      6500C046 
   3 3050 481A0000 	    .word XT_PARSENAME
   4 3054 D4240000 	    .word XT_FORTHRECOGNIZER
   5 3058 24250000 	    .word XT_RECOGNIZE
   6 305c 78000000 	    .word XT_DUP
   7 3060 38010000 	    .word XT_TO_R
   8 3064 900B0000 	    .word XT_CELLPLUS
   9 3068 900B0000 	    .word XT_CELLPLUS
  10 306c 1C020000 	    .word XT_FETCH
ARM GAS  amforth.asm 			page 79


  11 3070 C00C0000 	    .word XT_EXECUTE
  12 3074 50010000 	    .word XT_R_FROM
  13 3078 900B0000 	    .word XT_CELLPLUS
  14 307c 1C020000 	    .word XT_FETCH
  15 3080 A81B0000 	    .word XT_COMMA
  16 3084 24000000 	    .word XT_EXIT
 138              	.include "words/q-abort.s"
   1              	
   2 3088 3C300000 	COLON "?abort", QABORT
   2      00000000 
   2      063F6162 
   2      6F727400 
   2      40080000 
   3              	
   4 309c C0000000 	        .word XT_ROT,XT_DOCONDBRANCH,QABO1
   4      720F0000 
   4      B0300000 
   5 30a8 50280000 	        .word XT_TYPE,XT_ABORT
   5      A02C0000 
   6 30b0 EC060000 	QABO1:  .word XT_2DROP,XT_EXIT
   6      24000000 
 139              	.include "words/recurse.s"
   1              	
   2 30b8 8C300000 	IMMED "recurse", RECURSE
   2      10000000 
   2      07726563 
   2      75727365 
   2      40080000 
   3 30cc D02F0000 	    .word XT_LATEST
   4 30d0 1C020000 	    .word XT_FETCH
   5 30d4 A81B0000 	    .word XT_COMMA
   6 30d8 24000000 	    .word XT_EXIT
 140              	.include "words/reveal.s"
   1              	
   2 30dc BC300000 	COLON "reveal", REVEAL
   2      00000000 
   2      06726576 
   2      65616C00 
   2      40080000 
   3 30f0 0C300000 	    .word XT_NEWEST,XT_CELLPLUS,XT_FETCH
   3      900B0000 
   3      1C020000 
   4 30fc E0000000 	    .word XT_QDUP,XT_DOCONDBRANCH, REVEAL1
   4      720F0000 
   4      18310000 
   5 3108 0C300000 	    .word XT_NEWEST,XT_FETCH,XT_SWAP,XT_DOTO1
   5      1C020000 
   5      60000000 
   5      B8310000 
   6              	REVEAL1:
   7 3118 24000000 	    .word XT_EXIT
 141              	.include "words/right-bracket.s"
   1              	
   2 311c E0300000 	COLON "]", RBRACKET
   2      00000000 
   2      015DC046 
   2      40080000 
ARM GAS  amforth.asm 			page 80


   3 312c 04100000 	    .word XT_ONE
   4 3130 C00B0000 	    .word XT_STATE
   5 3134 30020000 	    .word XT_STORE
   6 3138 24000000 	    .word XT_EXIT
 142              	.include "words/semicolon.s"
   1              	
   2 313c 20310000 	IMMED "\x3b", SEMICOLON
   2      10000000 
   2      013BC046 
   2      40080000 
   3 314c 7C1B0000 	    .word XT_COMPILE
   4 3150 24000000 	    .word XT_EXIT
   5 3154 9C110000 	    .word XT_LBRACKET
   6 3158 EC300000 	    .word XT_REVEAL
   7 315c 24000000 	    .word XT_EXIT
 143              	.include "words/to.s"
   1              	
   2 3160 40310000 	IMMED "to", TO
   2      10000000 
   2      02746F00 
   2      40080000 
   3 3170 402C0000 	    .word XT_TICK
   4 3174 48320000 	    .word XT_TO_BODY
   5 3178 C00B0000 	    .word XT_STATE
   6 317c 1C020000 	    .word XT_FETCH
   7 3180 720F0000 	    .word XT_DOCONDBRANCH, PFA_DOTO1
   7      BC310000 
   8 3188 7C1B0000 	      .word XT_COMPILE
   9 318c 98310000 	      .word XT_DOTO
  10 3190 A81B0000 	      .word XT_COMMA
  11 3194 24000000 	      .word XT_EXIT
  12              	
  13 3198 40080000 	NONAME DOTO
  14 319c 50010000 	    .word XT_R_FROM
  15 31a0 78000000 	    .word XT_DUP
  16 31a4 900B0000 	    .word XT_CELLPLUS
  17 31a8 38010000 	    .word XT_TO_R
  18 31ac 1C020000 	    .word XT_FETCH
  19 31b0 B8310000 	    .word XT_DOTO1
  20 31b4 24000000 	    .word XT_EXIT
  21              	
  22 31b8 40080000 	NONAME DOTO1
  23 31bc 900B0000 	    .word XT_CELLPLUS
  24 31c0 78000000 	    .word XT_DUP, XT_FETCH, XT_SWAP
  24      1C020000 
  24      60000000 
  25 31cc 900B0000 	    .word XT_CELLPLUS
  26 31d0 900B0000 	    .word XT_CELLPLUS
  27 31d4 900B0000 	    .word XT_CELLPLUS
  28 31d8 1C020000 	    .word XT_FETCH
  29 31dc C00C0000 	    .word XT_EXECUTE
  30 31e0 24000000 	    .word XT_EXIT
 144              	.include "words/variable.s"
   1              	
   2 31e4 64310000 	COLON "variable", VARIABLE
   2      00000000 
   2      08766172 
ARM GAS  amforth.asm 			page 81


   2      6961626C 
   2      6500C046 
   3 31fc 54120000 	    .word XT_HERE
   4 3200 042E0000 	    .word XT_CONSTANT
   5 3204 860F0000 	    .word XT_DOLITERAL,4
   5      04000000 
   6 320c 70120000 	    .word XT_ALLOT
   7 3210 24000000 	    .word XT_EXIT
 145              	.include "words/wlscope.s"
   1              	
   2 3214 E8310000 	DEFER "wlscope", WLSCOPE, XT_GET_CURRENT
   2      C0000000 
   2      07776C73 
   2      636F7065 
   2      040F0000 
 146              	.include "words/to-body.s"
   1              	
   2 3238 18320000 	COLON ">body", TO_BODY
   2      00000000 
   2      053E626F 
   2      6479C046 
   2      40080000 
   3 324c 900B0000 	    .word XT_CELLPLUS,XT_EXIT
   3      24000000 
 147              	.include "words/get-current.s"
   1              	
   2 3254 3C320000 	COLON "get-current", GET_CURRENT
   2      00000000 
   2      0B676574 
   2      2D637572 
   2      72656E74 
   3              	
   4 326c C41D0000 	    .word XT_CURRENT,XT_EXIT
   4      24000000 
 148              	.include "words/greater-zero.s"
   1              	
   2 3274 58320000 	COLON "0>", GREATERZERO
   2      00000000 
   2      02303E00 
   2      40080000 
   3 3284 F00F0000 	    .word XT_ZERO,XT_GREATER,XT_EXIT
   3      98050000 
   3      24000000 
 149              	.include "words/to-in.s"
   1 3290 78320000 	VARIABLE ">in", TO_IN 
   1      01010000 
   1      033E696E 
   1      DA0E0000 
   1      C4090000 
 150              	.include "words/dp.s"
   1              	
   2 32a4 94320000 	VALUE "dp", DP, HERESTART
   2      A0000000 
   2      02647000 
   2      F40E0000 
   2      C8090000 
 151              	.include "words/udefer.s"
ARM GAS  amforth.asm 			page 82


   1              	
   2 32c4 A8320000 	COLON "Udefer@", UDEFER_FETCH
   2      00000000 
   2      07556465 
   2      66657240 
   2      40080000 
   3 32d8 440F0000 	  .word XT_UP_FETCH, XT_PLUS, XT_FETCH
   3      FC0A0000 
   3      1C020000 
   4 32e4 24000000 	.word XT_EXIT
   5              	
   6 32e8 C8320000 	COLON "Udefer!", UDEFER_STORE
   6      00000000 
   6      07556465 
   6      66657221 
   6      40080000 
   7 32fc 440F0000 	  .word XT_UP_FETCH, XT_PLUS, XT_STORE
   7      FC0A0000 
   7      30020000 
   8 3308 24000000 	.word XT_EXIT
 152              	.include "words/wordlist.s"
   1              	
   2 330c EC320000 	COLON "wordlist", WORDLIST
   2      00000000 
   2      08776F72 
   2      646C6973 
   2      7400C046 
   3              	
   4 3324 54120000 	    .word XT_HERE
   5 3328 860F0000 	    .word XT_DOLITERAL,4
   5      04000000 
   6 3330 70120000 	    .word XT_ALLOT
   7 3334 78000000 	    .word XT_DUP,XT_ZERO,XT_SWAP,XT_STORE
   7      F00F0000 
   7      60000000 
   7      30020000 
   8 3344 24000000 	    .word XT_EXIT
 153              	.include "words/ramwordlist.s"
   1              	
   2 3348 10330000 	VALUE "ram-wordlist", RAM_WORDLIST, 0
   2      A0000000 
   2      0C72616D 
   2      2D776F72 
   2      646C6973 
  32              	.include "dict_env.inc"
   1              	
   2              	.include "words/env-forthname.s"
   1              	
   2 3374 14000000 	ENVIRONMENT "name", FORTHNAME
   2      00000000 
   2      046E616D 
   2      6500C046 
   2      40080000 
   3 3388 B60E0000 	    STRING "amforth"
   3      07616D66 
   3      6F727468 
   4 3394 24000000 	    .word XT_EXIT
ARM GAS  amforth.asm 			page 83


   3              	.include "words/env-forthversion.s"
   1              	
   2 3398 78330000 	ENVIRONMENT "version", FORTHVERSION
   2      00000000 
   2      07766572 
   2      73696F6E 
   2      40080000 
   3 33ac 860F0000 	    .word XT_DOLITERAL, 69, XT_EXIT
   3      45000000 
   3      24000000 
   4              	.include "words/env-cpu.s"
   1              	
   2 33b8 9C330000 	ENVIRONMENT "cpu", CPU
   2      00000000 
   2      03637075 
   2      40080000 
   3              	
   4 33c8 860F0000 	  .word XT_DOLITERAL,RAM_lower_UNAME_BUF, XT_COUNT0
   4      D4090000 
   4      EC390000 
   5 33d4 24000000 	  .word XT_EXIT
   5              	.include "words/env-usersize.s"
   1              	
   2 33d8 BC330000 	ENVIRONMENT "/user", SLASH_USER
   2      00000000 
   2      052F7573 
   2      6572C046 
   2      40080000 
   3 33ec 860F0000 	    .word XT_DOLITERAL, userarea_size
   3      88000000 
   4 33f4 24000000 	    .word XT_EXIT
  33              	
  34              	.include "dict_appl.inc"
   1              	
   2              	.include "words/linux.s"
   1              	
   2 33f8 4C330000 	CODEWORD "stdout", SERIAL_EMIT
   2      00000000 
   2      06737464 
   2      6F757400 
   2      0C340000 
   3 340c 80B4     	  push {r7}
   4              	 
   5 340e 40B4     	  push {r6}
   6              	  
   7 3410 4FF00100 	  mov  r0, #1   @ File descriptor 1: STDOUT
   8 3414 6946     	  mov  r1, sp   @ Pointer to Message
   9 3416 4FF00102 	  mov  r2, #1   @ 1 Byte
  10 341a 4FF00407 	  mov  r7, #4   @ Syscall 4: Write
  11 341e 00DF     	  swi #0
  12              	  
  13 3420 40BC     	  pop {r6}
  14              	 
  15 3422 80BC     	  pop {r7}
  16 3424 57F8046B 	  loadtos
  17              	
  18 3428 FDF70DBA 	NEXT
ARM GAS  amforth.asm 			page 84


  19              	
  20 342c FC330000 	COLON "stdout?", SERIAL_EMITQ
  20      00000000 
  20      07737464 
  20      6F75743F 
  20      40080000 
  21 3440 A00D0000 	   .word XT_PAUSE,XT_TRUE, XT_EXIT
  21      58100000 
  21      24000000 
  22              	
  23 344c 30340000 	CODEWORD "stdin", SERIAL_KEY
  23      00000000 
  23      05737464 
  23      696EC046 
  23      60340000 
  24 3460 47F8046D 	  savetos
  25 3464 4FF00006 	  mov tos, #0
  26 3468 80B4     	  push {r7}
  27              	 
  28 346a 40B4     	  push {r6}
  29              	  
  30 346c 4FF00000 	  mov  r0, #0   @ File descriptor 0: STDIN
  31 3470 6946     	  mov  r1, sp   @ Pointer to Message
  32 3472 4FF00102 	  mov  r2, #1   @ 1 Byte
  33 3476 4FF00307 	  mov  r7, #3   @ Syscall 3: Read
  34 347a 00DF     	  swi #0
  35              	  
  36 347c 0028     	  cmp r0, #0 @ A size of zero bytes or less denotes EOF.
  37 347e 51DD     	  ble.n PFA_BYE
  38              	
  39 3480 40BC     	  pop {r6}
  40              	  
  41 3482 80BC     	  pop {r7}
  42              	  
  43 3484 042E     	  cmp tos, #4 @ Ctrl-D
  44 3486 4DD0     	  beq.n PFA_BYE
  45 3488 FDF7DDB9 	NEXT
  46              	
  47              	
  48 348c 50340000 	COLON "stdin?", SERIAL_KEYQ
  48      00000000 
  48      06737464 
  48      696E3F00 
  48      40080000 
  49 34a0 A00D0000 	   .word XT_PAUSE, XT_TRUE, XT_EXIT
  49      58100000 
  49      24000000 
  50              	
  51 34ac 90340000 	CODEWORD "std-init", UART_INIT
  51      00000000 
  51      08737464 
  51      2D696E69 
  51      7400C046 
  52 34c4 FDF7BFB9 	NEXT
  53              	
  54              	
  55              	
ARM GAS  amforth.asm 			page 85


  56 34c8 B0340000 	CODEWORD "cacheflush", CACHEFLUSH @ ( -- )
  56      00000000 
  56      0A636163 
  56      6865666C 
  56      75736800 
  57              	@ -----------------------------------------------------------------------------
  58 34e0 C0B4     	  push {r6, r7}
  59              	
  60 34e2 BFF35F8F 	  dmb
  61 34e6 BFF34F8F 	  dsb
  62 34ea BFF36F8F 	  isb  
  63              	  
  64 34ee 0648     	  ldr r0, =CACHESTART  @ Start address
  65 34f0 0649     	  ldr r1, =CACHEEND    @ End  address
  66 34f2 0022     	  movs r2, #0          @ This zero is important !s
  67 34f4 0023     	  movs r3, #0
  68 34f6 0024     	  movs r4, #0
  69 34f8 0025     	  movs r5, #0
  70 34fa 0026     	  movs r6, #0
  71 34fc 044F     	  ldr r7, =0x000f0002  @ Syscall __ARM_NR_cacheflush
  72 34fe 00DF     	  swi #0
  73              	
  74 3500 C0BC     	  pop {r6, r7}
  75 3502 FDF7A0B9 	NEXT
  75      00000000 
  75      00000000 
  75      10000200 
  75      0F00
  76              	
  77 3514 CC340000 	CODEWORD "bye", BYE
  77      00000000 
  77      03627965 
  77      24350000 
  78 3524 3046     	  mov  r0, tos @ Error code 
  79 3526 4FF00107 	  mov  r7, #1  @ Syscall 1: Exit
  80 352a 00DF     	  swi #0
  81 352c FDF78BB9 	NEXT
  82              	
  83 3530 18350000 	CODEWORD "syscall", SYSCALL @ ( r0 r1 r2 r3 r4 r5 Syscall# -- r0 )
  83      00000000 
  83      07737973 
  83      63616C6C 
  83      44350000 
  84 3544 80B4     	 push { r7} @ Save psp register
  85              	
  86 3546 40B4     	 push {tos} @ Syscall number
  87              	
  88 3548 40CF     	 ldm psp!, {r6}
  89 354a 20CF     	 ldm psp!, {r5}
  90 354c 10CF     	 ldm psp!, {r4}
  91 354e 08CF     	 ldm psp!, {r3}
  92 3550 04CF     	 ldm psp!, {r2}
  93 3552 02CF     	 ldm psp!, {r1}
  94 3554 01CF     	 ldm psp!, {r0}
  95              	
  96 3556 80BC     	 pop {r7} @ into r7
  97              	
ARM GAS  amforth.asm 			page 86


  98 3558 00DF     	 swi #0
  99              	
 100 355a 80BC     	 pop {r7}     @ restore old psp
 101 355c 1C37     	 adds r7, #28 @ Drop 7 elements at once
 102              	
 103 355e 0600     	 movs r6, r0  @ Syscall reply into TOS
 104              	
 105 3560 FDF771B9 	NEXT
 106              	
 107 3564 34350000 	VARIABLE "argv", ARGV
 107      01010000 
 107      04617267 
 107      7600C046 
 107      DA0E0000 
 108              	
 109              	ramallot UNAME_BUF, 512
 110              	
 111 357c 68350000 	COLON "uname", UNAME
 111      00000000 
 111      05756E61 
 111      6D65C046 
 111      40080000 
 112 3590 860F0000 	  .word XT_DOLITERAL,RAM_lower_UNAME_BUF
 112      D4090000 
 113 3598 F00F0000 	  .word XT_ZERO, XT_ZERO, XT_ZERO, XT_ZERO, XT_ZERO, XT_ZERO
 113      F00F0000 
 113      F00F0000 
 113      F00F0000 
 113      F00F0000 
 114 35b0 860F0000 	  .word XT_DOLITERAL, 122
 114      7A000000 
 115 35b8 40350000 	  .word XT_SYSCALL, XT_DROP
 115      48000000 
 116 35c0 24000000 	  .word XT_EXIT
 117              	
 118 35c4 DC330000 	ENVIRONMENT "hostname", HOSTNAME
 118      00000000 
 118      08686F73 
 118      746E616D 
 118      6500C046 
 119 35dc 860F0000 	  .word XT_DOLITERAL,RAM_lower_UNAME_BUF+0x41, XT_COUNT0
 119      150A0000 
 119      EC390000 
 120 35e8 24000000 	.word XT_EXIT
   3              	.include "words/appl-turnkey.s"
   1              	
   2 35ec 80350000 	COLON "appl-turnkey", APPLTURNKEY
   2      00000000 
   2      0C617070 
   2      6C2D7475 
   2      726E6B65 
   3 3608 E4110000 	  .word XT_DECIMAL, XT_UNAME
   3      8C350000 
   4 3610 BC270000 	  .word XT_DOT_VER, XT_SPACE, XT_ENV_BOARD, XT_TYPE, XT_SPACE, XT_ENV_HOSTNAME, XT_TYPE, XT_CR
   4      40110000 
   4      24370000 
   4      50280000 
ARM GAS  amforth.asm 			page 87


   4      40110000 
   5 3630 C0360000 	  .word XT_BUILD_INFO, XT_TYPE, XT_SPACE,XT_REV_INFO, XT_TYPE,XT_CR
   5      50280000 
   5      40110000 
   5      00370000 
   5      50280000 
   6              	
   7 3648 B60E0000 	  STRING "Type CTRL-D or CTRL-C to exit"
   7      1D547970 
   7      65204354 
   7      524C2D44 
   7      206F7220 
   8 366c 50280000 	  .word XT_TYPE
   9 3670 24000000 	.word XT_EXIT
  10              	
  11 3674 F0350000 	CONSTANT "cache-start", CACHE_START, CACHESTART
  11      00000000 
  11      0B636163 
  11      68652D73 
  11      74617274 
  12 3690 78360000 	CONSTANT "cache-end", CACHE_END, CACHEEND
  12      00000000 
  12      09636163 
  12      68652D65 
  12      6E64C046 
   4              	.include "words/build-info.s"
   1              	
   2 36ac 94360000 	COLON "build-info", BUILD_INFO
   2      00000000 
   2      0A627569 
   2      6C642D69 
   2      6E666F00 
   3 36c4 B60E0000 	 STRING " Sun Oct 18 18:22:11 CEST 2020"
   3      1E205375 
   3      6E204F63 
   3      74203138 
   3      2031383A 
   4 36e8 24000000 	.word XT_EXIT
   5              	
   6 36ec B0360000 	COLON "rev-info", REV_INFO
   6      00000000 
   6      08726576 
   6      2D696E66 
   6      6F00C046 
   7 3704 B60E0000 	 STRING "2454"
   7      04323435 
   7      3400C046 
   8 3710 24000000 	.word XT_EXIT
   5              	.include "words/env-board.s"
   1              	
   2 3714 C8350000 	ENVIRONMENT "board", BOARD
   2      00000000 
   2      05626F61 
   2      7264C046 
   2      40080000 
   3 3728 860F0000 	  .word XT_DOLITERAL,RAM_lower_UNAME_BUF+260, XT_COUNT0
   3      D80A0000 
ARM GAS  amforth.asm 			page 88


   3      EC390000 
   4 3734 24000000 	  .word XT_EXIT
   6              	.include "words/dump.s"
   1              	# RAM dump is byte oriented:
   2              	# 00B0 BD 3E 55 33 5B E6 C4 9B 4A 63 72 20 63 72 20 24   .>U3[...Jcr.cr.$
   3              	# 00C0 62 30 20 32 30 20 64 75 6D 70 20 63 72 20 63 72   b0.20.dump.cr.cr
   4              	
   5              	#: ?ascii ( char -- printable-char )
   6              	#  dup $20 < if drop $2e
   7              	#           else dup $7e > 
   8              	#                if drop $2e then
   9              	#           then ;
  10              	
  11              	
  12 3738 F0360000 	COLON "?ascii", QASCII
  12      00000000 
  12      063F6173 
  12      63696900 
  12      40080000 
  13 374c 78000000 	    .word XT_DUP, XT_DOLITERAL,0x20,XT_LESS
  13      860F0000 
  13      20000000 
  13      78050000 
  14 375c 720F0000 	    .word XT_DOCONDBRANCH,PFA_QASCII1
  14      78370000 
  15 3764 48000000 		.word XT_DROP, XT_DOLITERAL,0x2e
  15      860F0000 
  15      2E000000 
  16 3770 680F0000 		.word XT_DOBRANCH, PFA_QASCII2
  16      9C370000 
  17              	PFA_QASCII1:
  18 3778 78000000 		.word XT_DUP, XT_DOLITERAL, 0x7e,XT_GREATER
  18      860F0000 
  18      7E000000 
  18      98050000 
  19 3788 720F0000 		.word XT_DOCONDBRANCH,PFA_QASCII2
  19      9C370000 
  20 3790 48000000 		.word XT_DROP, XT_DOLITERAL,0x2e
  20      860F0000 
  20      2E000000 
  21              	PFA_QASCII2:
  22 379c 24000000 	    .word XT_EXIT
  23              	
  24              	
  25 37a0 3C370000 	COLON ".2hex", DOT2HEX
  25      00000000 
  25      052E3268 
  25      6578C046 
  25      40080000 
  26 37b4 E80A0000 	    .word XT_BASE,XT_FETCH,XT_TO_R,XT_HEX
  26      1C020000 
  26      38010000 
  26      08120000 
  27 37c4 CC0A0000 	    .word XT_S2D,XT_L_SHARP,XT_SHARP,XT_SHARP,XT_SHARP_G,XT_TYPE
  27      E8120000 
  27      08130000 
  27      08130000 
ARM GAS  amforth.asm 			page 89


  27      8C130000 
  28 37dc 50010000 	    .word XT_R_FROM,XT_BASE,XT_STORE
  28      E80A0000 
  28      30020000 
  29 37e8 24000000 	    .word XT_EXIT
  30              	
  31              	#: .2hex base @ >r hex s>d <# # # #> type r> base ! ;
  32              	#: .4hex base @ >r hex s>d <# # # # # #> type r> base ! ;
  33              	
  34 37ec A4370000 	COLON ".4hex", DOT4HEX
  34      00000000 
  34      052E3468 
  34      6578C046 
  34      40080000 
  35 3800 E80A0000 	    .word XT_BASE,XT_FETCH,XT_TO_R,XT_HEX
  35      1C020000 
  35      38010000 
  35      08120000 
  36 3810 CC0A0000 	    .word XT_S2D,XT_L_SHARP,XT_SHARP,XT_SHARP,XT_SHARP,XT_SHARP
  36      E8120000 
  36      08130000 
  36      08130000 
  36      08130000 
  37 3828 8C130000 	    .word XT_SHARP_G,XT_TYPE
  37      50280000 
  38 3830 50010000 	    .word XT_R_FROM,XT_BASE,XT_STORE
  38      E80A0000 
  38      30020000 
  39 383c 24000000 	    .word XT_EXIT
  40              	
  41 3840 F0370000 	COLON ".8hex", DOT8HEX
  41      00000000 
  41      052E3868 
  41      6578C046 
  41      40080000 
  42 3854 E80A0000 	    .word XT_BASE,XT_FETCH,XT_TO_R,XT_HEX
  42      1C020000 
  42      38010000 
  42      08120000 
  43 3864 CC0A0000 	    .word XT_S2D,XT_L_SHARP,XT_SHARP,XT_SHARP,XT_SHARP,XT_SHARP
  43      E8120000 
  43      08130000 
  43      08130000 
  43      08130000 
  44 387c 08130000 	    .word XT_SHARP,XT_SHARP,XT_SHARP,XT_SHARP
  44      08130000 
  44      08130000 
  44      08130000 
  45 388c 8C130000 	    .word XT_SHARP_G,XT_TYPE
  45      50280000 
  46 3894 50010000 	    .word XT_R_FROM,XT_BASE,XT_STORE
  46      E80A0000 
  46      30020000 
  47 38a0 24000000 	    .word XT_EXIT
  48              	
  49              	
  50              	#: dump ( addr count -- )
ARM GAS  amforth.asm 			page 90


  51              	#  swap $f invert and $swap
  52              	#  cr 0
  53              	#  do dup .8hex space
  54              	#     $10 0 do dup i + c@ .2hex space loop 2 spaces
  55              	#     $10 0 do dup i + c@ ?ascii emit loop
  56              	#     $10 + cr 
  57              	#  $10 +loop drop ;
  58              	
  59 38a4 44380000 	COLON "dump", DUMP
  59      00000000 
  59      0464756D 
  59      7000C046 
  59      40080000 
  60 38b8 60000000 	    .word XT_SWAP,XT_DOLITERAL, 0xfffffff0, XT_AND,XT_SWAP
  60      860F0000 
  60      F0FFFFFF 
  60      80030000 
  60      60000000 
  61 38cc FC100000 	    .word XT_CR,XT_ZERO,XT_DODO
  61      F00F0000 
  61      F80D0000 
  62              	PFA_DUMP0:
  63 38d8 78000000 	      .word XT_DUP,XT_DOT8HEX,XT_SPACE
  63      50380000 
  63      40110000 
  64 38e4 860F0000 	      .word XT_DOLITERAL,0x10,XT_ZERO,XT_DODO
  64      10000000 
  64      F00F0000 
  64      F80D0000 
  65              	  PFA_DUMP1:
  66 38f4 78000000 	        .word XT_DUP,XT_I,XT_PLUS,XT_CFETCH,XT_DOT2HEX,XT_SPACE,XT_DOLOOP,PFA_DUMP1
  66      680E0000 
  66      FC0A0000 
  66      C4040000 
  66      B0370000 
  67              	  PFA_DUMP2:
  68 3914 40110000 	      .word XT_SPACE,XT_SPACE
  68      40110000 
  69 391c 860F0000 	      .word XT_DOLITERAL,0x10,XT_ZERO,XT_DODO
  69      10000000 
  69      F00F0000 
  69      F80D0000 
  70              	  PFA_DUMP3:
  71 392c 78000000 	        .word XT_DUP,XT_I,XT_PLUS,XT_CFETCH,XT_QASCII, XT_EMIT,XT_DOLOOP,PFA_DUMP3
  71      680E0000 
  71      FC0A0000 
  71      C4040000 
  71      48370000 
  72              	  PFA_DUMP4:
  73              	
  74 394c 860F0000 	      .word XT_DOLITERAL,0x10,XT_PLUS,XT_CR
  74      10000000 
  74      FC0A0000 
  74      FC100000 
  75              	PFA_DUMP5:
  76 395c 860F0000 	    .word XT_DOLITERAL,0x10,XT_DOPLUSLOOP,PFA_DUMP0
  76      10000000 
ARM GAS  amforth.asm 			page 91


  76      200E0000 
  76      D8380000 
  77 396c 48000000 	.word XT_DROP,XT_EXIT
  77      24000000 
   7              	.include "words/type0.s"
   1              	
   2 3974 A8380000 	COLON "type0", TYPE0
   2      00000000 
   2      05747970 
   2      6530C046 
   2      40080000 
   3              	
   4              	PFA_TYPE0_LOOP:
   5 3988 78000000 	    .word XT_DUP,XT_CFETCH,XT_DUP, XT_NOTZEROEQUAL,XT_DOCONDBRANCH,PFA_TYPE0_LEAVE
   5      C4040000 
   5      78000000 
   5      08050000 
   5      720F0000 
   6 39a0 78000000 	    .word XT_DUP,XT_DOLITERAL,10,XT_EQUAL,XT_DOCONDBRANCH,PFA_TYPE0_1,XT_DOLITERAL,13,XT_EMIT
   6      860F0000 
   6      0A000000 
   6      04060000 
   6      720F0000 
   7              	PFA_TYPE0_1:
   8 39c4 3C0D0000 	    .word XT_EMIT, XT_1PLUS, XT_DOBRANCH,PFA_TYPE0_LOOP
   8      2C0B0000 
   8      680F0000 
   8      88390000 
   9              	PFA_TYPE0_LEAVE:
  10 39d4 EC060000 	    .word XT_2DROP,XT_EXIT
  10      24000000 
  11              	
  12 39dc 78390000 	COLON "count0", COUNT0
  12      00000000 
  12      06636F75 
  12      6E743000 
  12      40080000 
  13 39f0 78000000 	  .word XT_DUP, XT_ZERO
  13      F00F0000 
  14              	PFA_COUNT0_LOOP:
  15 39f8 9C080000 	    .word XT_2DUP, XT_PLUS,XT_CFETCH,XT_NOTZEROEQUAL,XT_DOCONDBRANCH,PFA_COUNT0_LEAVE
  15      FC0A0000 
  15      C4040000 
  15      08050000 
  15      720F0000 
  16 3a10 2C0B0000 	      .word XT_1PLUS,XT_DOBRANCH,PFA_COUNT0_LOOP
  16      680F0000 
  16      F8390000 
  17              	PFA_COUNT0_LEAVE:
  18 3a1c 90000000 	    .word XT_NIP,XT_EXIT
  18      24000000 
  35              	
  36 3a24 E0390000 	ENDDICT
  36      A0000000 
  36      0C61726D 
  36      2D776F72 
  36      646C6973 
ARM GAS  amforth.asm 			page 92


  37              	
  38              	.bss
  39              	
  40              	.equ CACHESTART, .
  41              	
  42              	.equ RamStart, .
  43              	  .rept 1024 * 256      @ 1024 * 254*4 = 1 MB for RAM dictionary
  44              	  .word 0x00000000
  45 0000 00000000 	  .endr
  45      00000000 
  45      00000000 
  45      00000000 
  45      00000000 
  46              	.equ RamEnd, .
  47              	
  48              	.equ CACHEEND, .
